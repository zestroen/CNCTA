(function() {
    function Pa(d, h, b, f, c, ab, O) {
        var a = d[4]
          , F = d[5]
          , da = 1 / 2.4;
        ab = 1 === b[0] ? ab : .01;
        for (var u = Yb(), w = 0, A = 0, z = 0; z < F.length; z++)
            for (var n = 0; n < F[z].length; n++)
                0 < F[z][n] && (w += F[z][n],
                A += 1);
        w /= A;
        for (z = A = F = 0; z < a.length; z++)
            for (n = 0; n < a[z].length; n++)
                0 < a[z][n] && (F += a[z][n],
                A += 1);
        F /= A;
        w = Math.min(Math.floor(w) + 1, 64);
        (f[0] + f[1] + f[2]) / 3 + 7 < w && (f = [w, w, w]);
        console.log("RT levels: " + f[0] + "," + f[1] + "," + f[2]);
        if (!0 === ClientLib.Data.MainData.GetInstance().get_Server().get_CombatUseMoral())
            if (0 === ClientLib.Data.MainData.GetInstance().get_Server().get_CombatMoralVersion())
                var v = Math.min(Math.ceil(15 * (ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().get_LvlBase() - ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity().get_LvlOffense() - 4)), 82);
            else
                1 === ClientLib.Data.MainData.GetInstance().get_Server().get_CombatMoralVersion() && (v = Math.min(Math.ceil(15 * (ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().get_LvlBase() - ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity().get_LvlOffense() - 7)), 82));
        else
            v = 0;
        f = Zb(d, u, f, h, v);
        w = f[3];
        a = f[4];
        v = f[5];
        z = w[0];
        A = w[1];
        n = w[3];
        var k = w[5]
          , m = a[1]
          , D = a[16]
          , l = a[17]
          , p = a[18];
        a = a[22];
        var V = v[1]
          , H = v[3]
          , aa = v[6]
          , I = v[7];
        v = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().get_LvlBase() - ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity().get_LvlOffense();
        v = 0 < v ? Math.pow(1.2, v) : 1;
        var Qa = J(A)
          , C = J(z);
        w = [];
        w.push(l.reduce(function(a, b) {
            return a + b
        }, 0));
        w.push(q(D, x(p, 1)).reduce(function(a, b) {
            return a + b
        }, 0) + q(aa, x(I, 1)).reduce(function(a, b) {
            return a + b
        }, 0) + q(aa, x(I, 1.5)).reduce(function(a, b) {
            return a + b
        }, 0));
        w.push(q(D, x(p, 2)).reduce(function(a, b) {
            return a + b
        }, 0) + q(aa, x(I, 2)).reduce(function(a, b) {
            return a + b
        }, 0) + q(aa, x(I, 1.5)).reduce(function(a, b) {
            return a + b
        }, 0));
        w.push(q(aa, x(I, 3)).reduce(function(a, b) {
            return a + b
        }, 0));
        w = w.reduce(function(a, b) {
            return a + b
        }, 0);
        A = x(H, 101 + 20 * (b[0] - 1));
        H = [];
        for (z = 0; z < V.length; z++)
            H.push(aa[z] * Math.max(.25, c - Math.abs(V[z] - V[A])));
        aa = [];
        for (z = 0; z < m.length; z++)
            aa.push(D[z] * Math.max(.25, c - Math.abs(m[z] - V[A])));
        D = [];
        for (z = 0; z < m.length; z++)
            D.push(l[z] * Math.max(.25, c - Math.abs(m[z] - V[A])));
        c = [];
        c.push(D.reduce(function(a, b) {
            return a + b
        }, 0));
        c.push(q(aa, x(p, 1)).reduce(function(a, b) {
            return a + b
        }, 0) + q(H, x(I, 1)).reduce(function(a, b) {
            return a + b
        }, 0) + q(H, x(I, 1.5)).reduce(function(a, b) {
            return a + b
        }, 0));
        c.push(q(aa, x(p, 2)).reduce(function(a, b) {
            return a + b
        }, 0) + q(H, x(I, 2)).reduce(function(a, b) {
            return a + b
        }, 0) + q(H, x(I, 1.5)).reduce(function(a, b) {
            return a + b
        }, 0));
        c.push(q(H, x(I, 3)).reduce(function(a, b) {
            return a + b
        }, 0));
        c = c.reduce(function(a, b) {
            return a + b
        }, 0);
        c = [w, H, aa, c, A, D];
        console.time("Time spent on optimization");
        z = [];
        A = [];
        for (l = m = p = 0; l < C.length; l++)
            z.push(C[l] + 4),
            A.push(Qa[l]);
        a = Ea(a.length, 0);
        Qa = 1;
        C = [];
        for (l = 0; l < k.length; l++)
            2 !== k[l] && 724 !== n[l] && 744 !== n[l] || C.push(l);
        for (n = 0; n < C.length; n++) {
            k = C[n];
            D = -1E5;
            l = [];
            l = Aa(d, h, b, f, c, da, u, A, z, a, O);
            reslt = l[0];
            l = v * l[1] - l[2] * ab - 5 * l[3] - 2 * l[4];
            l > D && (D = l,
            p = A[k],
            m = z[k],
            V = p,
            I = m);
            for (V = 1; 9 >= V; V++)
                for (I = 4; 1 <= I; I--) {
                    aa = [];
                    for (l = 0; l < z.length; l++)
                        z[l] === I && A[l] === V && aa.push(l);
                    0 == aa.length && (z[k] = I,
                    A[k] = V,
                    l = Aa(d, h, b, f, c, da, u, A, z, a, O),
                    reslt = l[0],
                    l = v * l[1] - l[2] * ab - 5 * l[3] - 2 * l[4],
                    l > D && (D = l,
                    p = V,
                    m = I,
                    Qa = reslt[6]))
                }
            A[k] = p;
            z[k] = m
        }
        .5 > Qa ? console.log("Can possibly kill: cy " + 100 * Qa) : console.log("Unlikely to kill: cy " + 100 * Qa);
        console.timeEnd("Time spent on optimization");
        return [100 * Qa, w, F]
    }
    function ua(c) {
        return c * Math.min(1 + Math.exp(2 * -Math.log(c)) / 400, 1.355)
    }
    function x(c, h) {
        for (var b = [], f = 0; f < c.length; f++)
            c[f] === h && b.push(f);
        return b
    }
    function q(c, h) {
        for (var b = [], f = 0; f < h.length; f++)
            b.push(c[h[f]]);
        return b
    }
    function J(c) {
        for (var h = [], b = 0; b < c.length; b++)
            h.push(c[b]);
        return h
    }
    function Fa(c) {
        for (var h = [], b = 0; b < c.length; b++)
            h.push(-c[b]);
        return h
    }
    function Ea(c, h) {
        for (var b = [], f = 0; f < c; f++)
            b.push(h);
        return b
    }
    function Ga(c) {
        if (0 === c.length)
            return -1;
        for (var h = c[0], b = 0, f = 1; f < c.length; f++)
            c[f] > h && (b = f,
            h = c[f]);
        return b
    }
    function $b(c, h) {
        if (0 === c.length || c.length < h)
            return -1;
        for (var b = [], f = 0; f < c.length; ++f)
            b.push(f);
        b.sort(function(b, f) {
            return c[b] < c[f] ? 1 : c[b] > c[f] ? -1 : 0
        });
        var d = [];
        for (f = 0; f < h; f++)
            d.push(b[f]);
        return d
    }
    function qa(c, h) {
        for (var b = [], f = 0; f < c.length; f++)
            b.push(c[f][h]);
        return b
    }
    function Yb() {
        var c = 14.2 * Cb;
        unitindex = [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
201, 202, 203, 204, 205, 221, 222, 223, 224, 225, 241, 242, 243, 244, 245,
301, 302, 303, 304, 305, 321, 322, 323, 324, 341, 342, 343, 344,
401, 402, 403, 404, 405, 406, 407, 421, 422, 423, 424, 425, 426, 441, 442, 443, 444, 445, 446,
501, 502, 503, 504, 505, 521, 522, 523, 524, 525, 541, 542, 543, 544, 545,
601, 602, 603, 604, 605, 621, 622, 623, 624, 625, 641, 642, 643, 644, 645,
701, 702, 703, 704, 721, 722, 723, 724, 741, 742, 743, 744,
801, 802, 803, 804, 206, 306, 408, 409, 413, 412, 411, 215, 311, 313, 315, 416, 417];
        return [25.8, c, 1.17, 1, [
[101, 1, 0, 0, 0, 0, 0, 0, 0, 0, 550, 13, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[102, 1, 0, 0, 0, 0, 0, 0, 0, 0, 200, 13, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[103, 1, 0, 0, 0, 0, 0, 0, 0, 0, 150, 63, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[104, 1, 0, 0, 0, 0, 0, 0, 0, 0, 100, 44, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[105, 1, 0, 0, 0, 0, 0, 0, 0, 0, 200, 13, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[106, 1, 0, 0, 0, 0, 0, 0, 0, 0, 200, 94, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[107, 1, 0, 0, 0, 0, 0, 0, 0, 0, 150, 44, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[108, 1, 0, 0, 0, 0, 0, 0, 0, 0, 150, 44, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[109, 1, 0, 0, 0, 0, 0, 0, 0, 0, 150, 44, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[110, 1, 0, 0, 0, 0, 0, 0, 0, 0, 150, 44, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[121, 1, 0, 0, 0, 0, 0, 0, 0, 0, 5500, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[122, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2500, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[123, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[124, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[125, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[126, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[127, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3E3, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[128, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1500, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[129, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2500, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[130, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2500, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[131, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2500, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[132, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3E3, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[133, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2500, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[134, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2500, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[135, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2500, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[141, 1, 0, 0, 0, 0, 0, 0, 0, 0, 5500, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[142, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2500, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[143, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[144, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[145, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[146, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[147, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3E3, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[148, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1500, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[149, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2500, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[150, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2500, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[151, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2500, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[152, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3E3, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[153, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2500, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[154, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2500, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[155, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2500, 33, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[201, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1153, 1, 2016, 2E3, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[202, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 1030, 1, 1965, 1600, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[203, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 693, 1, 1986, 1E3, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[204, 2, 6, 5, 0, 2.5, 0, 0, 0, 0, 0, 5682, 1, 10131, 1150, 800, 6080, 0, 0, 0, 0, 0, 0, 0],
[205, 2, 7, 0, 0, 2.5, 0, 0, 0, 0, 0, 3812, 1, 6585, 800, 0, 0, 6400, 0, 0, 0, 0, 0, 0],
[221, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 1, 2E3, 2E3, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[222, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 1, 2E3, 1500, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[223, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 1, 2E3, 1E3, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[224, 2, 6, 5, 0, 2.5, 0, 0, 0, 0, 0, 2E3, 1, 2E3, 1250, 1600, 5600, 0, 0, 0, 0, 0, 0, 0],
[225, 2, 7, 0, 0, 2.5, 0, 0, 0, 0, 0, 2E3, 1, 2E3, 1E3, 0, 0, 6400, 0, 0, 0, 0, 0, 0],
[241, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 1, 2E3, 2E3, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[242, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 1, 2E3, 1E3, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[243, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 1, 2E3, 750, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[244, 2, 6, 5, 0, 2.5, 0, 0, 0, 0, 0, 2E3, 1, 2E3, 1E3, 1920, 6560, 0, 0, 0, 0, 0, 0, 0],
[245, 2, 7, 0, 0, 2.5, 0, 0, 0, 0, 0, 2E3, 1, 2E3, 1250, 0, 0, 5760, 0, 0, 0, 0, 0, 0], 
[301, 3, 5, 6, 7, 2.5, 0, 0, 0, 0, 0, 2540, 1, 6570, 900, 3520, 1600, 960, 0, 0, 0, 0, 0, 0],
[302, 3, 6, 5, 7, 1.5, 0, 40, 0, 0, 0, 2544, 2, 6519, 1100, 1280, 5120, 960, 0, 0, 0, 0, 0, 0],
[303, 3, 5, 6, 7, 1.5, 0, 40, 0, 0, 0, 2544, 2, 3290, 700, 2880, 1760, 1120, 0, 0, 0, 0, 0, 0],
[304, 3, 7, 6, 5, 1.5, 0, 40, 0, 0, 0, 1023, 2, 3290, 700, 800, 1920, 3200, 0, 0, 0, 0, 0, 0],
[305, 3, 5, 6, 7, 2.5, 0, 40, 0, 0, 0, 2439, 2, 6294, 500, 4160, 640, 480, 0, 0, 0, 0, 0, 0],
[321, 3, 5, 7, 6, 2.5, 0, 0, 0, 0, 0, 2E3, 1, 2E3, 1E3, 3200, 1120, 1280, 0, 0, 0, 0, 0, 0], 
[322, 3, 6, 7, 5, 1.5, 0, 40, 0, 0, 0, 2E3, 2, 2E3, 800, 640, 5600, 960, 0, 0, 0, 0, 0, 0],
[323, 3, 7, 6, 5, 1.5, 0, 40, 0, 0, 0, 2E3, 2, 2E3, 700, 800, 1920, 4E3, 0, 0, 0, 0, 0, 0],
[324, 3, 5, 6, 7, 3.5, 0, 40, 0, 0, 0, 2E3, 2, 2E3, 500, 2720, 480, 400, 0, 0, 0, 0, 0, 0],
[341, 3, 5, 7, 6, 2.5, 0, 0, 0, 0, 0, 2E3, 1, 2E3, 850, 3680, 1344, 1520, 0, 0, 0, 0, 0, 0],
[342, 3, 6, 7, 5, 1.5, 0, 40, 0, 0, 0, 2E3, 2, 2E3, 1100, 960, 7200, 1440, 0, 0, 0, 0, 0, 0],
[343, 3, 7, 6, 5, 2.5, 0, 40, 0, 0, 0, 2E3, 2, 2E3, 600, 480, 960, 2880, 0, 0, 0, 0, 0, 0],
[344, 3, 5, 6, 7, 3.5, 0, 40, 0, 0, 0, 2E3, 2, 2E3, 700, 2480, 400, 320, 0, 0, 0, 0, 0, 0],
[401, 4, 6, 5, 0, 5.5, 3.5, 0, 0, 0, 0, 10582, 2, 14789, 600, 160, 2080, 0, 0, 0, 0, 0, 0, 0],
[402, 4, 5, 6, 7, 5.5, 3.5, 0, 0, 0, 0, 10582, 2, 14789, 500, 1440, 400, 240, 0, 0, 0, 0, 0, 0],
[403, 4, 7, 0, 0, 5.5, 3.5, 0, 0, 0, 0, 10582, 2, 14789, 500, 0, 0, 2560, 0, 0, 0, 0, 0, 0],
[404, 4, 6, 5, 0, 2.5, 0, 60, 0, 0, 0, 2797, 2, 6567, 900, 960, 3520, 0, 0, 0, 0, 0, 0, 0],
[405, 4, 5, 6, 7, 1.5, 0, 80, 0, 0, 0, 2031, 2, 6570, 1E3, 4800, 1600, 960, 0, 0, 0, 0, 0, 0], 
[406, 4, 7, 6, 5, 2.5, 0, 80, 0, 0, 0, 3747, 2, 7062, 900, 960, 1280, 3520, 0, 0, 0, 0, 0, 0],
[407, 4, 6, 5, 7, 2.5, 0, 60, 0, 0, 0, 8617, 2, 10428, 1650, 1760, 3680, 1600, 0, 0, 0, 0, 0, 0],
[421, 4, 6, 5, 0, 5.5, 0, 0, 0, 0, 0, 4E3, 2, 4E3, 700, 320, 1920, 0, 0, 0, 0, 0, 0, 0],
[422, 4, 5, 6, 7, 5.5, 3.5, 0, 0, 0, 0, 4E3, 2, 4E3, 600, 1600, 320, 160, 0, 0, 0, 0, 0, 0],
[423, 4, 7, 0, 0, 5.5, 3.5, 0, 0, 0, 0, 4E3, 2, 4E3, 650, 0, 0, 2560, 0, 0, 0, 0, 0, 0], 
[424, 4, 6, 5, 0, 2.5, 0, 60, 0, 0, 0, 4E3, 2, 4E3, 1E3, 960, 3680, 0, 0, 0, 0, 0, 0, 0], 
[425, 4, 5, 6, 7, 1.5, 0, 80, 0, 0, 0, 4E3, 2, 4E3, 1E3, 5120, 1920, 1280, 0, 0, 0, 0, 0, 0],
[426, 4, 7, 6, 5, 2.5, 0, 80, 0, 0, 0, 4E3, 2, 4E3, 800, 1120, 1920, 4E3, 0, 0, 0, 0, 0, 0],
[441, 4, 6, 5, 0, 5.5, 3.5, 0, 0, 0, 0, 4E3, 2, 4E3, 700, 160, 1920, 0, 0, 0, 0, 0, 0, 0], 
[442, 4, 5, 7, 6, 5.5, 3.5, 0, 0, 0, 0, 4E3, 2, 4E3, 600, 1600, 240, 400, 0, 0, 0, 0, 0, 0],
[443, 4, 7, 0, 0, 5.5, 3.5, 0, 0, 0, 0, 4E3, 2, 4E3, 650, 0, 0, 2400, 0, 0, 0, 0, 0, 0],
[444, 4, 6, 5, 7, 2.5, 0, 60, 0, 0, 0, 4E3, 2, 4E3, 950, 1440, 3520, 1280, 0, 0, 0, 0, 0, 0],
[445, 4, 5, 6, 7, 1.5, 0, 60, 0, 0, 0, 4E3, 2, 4E3, 1200, 4320, 1600, 1040, 0, 0, 0, 0, 0, 0],
[446, 4, 7, 6, 5, 1.5, 0, 80, 0, 0, 0, 4E3, 2, 4E3, 800, 1120, 1760, 4E3, 0, 0, 0, 0, 0, 0], 
[501, 5, 3, 0, 0, 1.5, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[502, 5, 2, 0, 0, 1.5, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[503, 5, 3, 0, 0, 2.5, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[504, 5, 4, 0, 0, 1.5, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[505, 5, 2, 0, 0, 1.5, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[521, 5, 3, 4, 2, 1.5, 0, 60, 441, 700, 0, 0, 0, 0, 0, 0, 0, 0, 0, 700, 3520, 1760, 1120, 0],
[522, 5, 2, 4, 3, 1.5, 0, 60, 441, 2500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 700, 800, 1920, 4E3, 0],
[523, 5, 3, 4, 2, 2.5, 0, 60, 882, 400, 0, 0, 0, 0, 0, 0, 0, 0, 0, 500, 4800, 800, 640, 0], 
[524, 5, 4, 2, 3, 1.5, 0, 60, 441, 600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 640, 5600, 960, 0],
[525, 5, 2, 2, 3, 1.5, 0, 60, 882, 5E3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 1280, 640, 8E3, 0],
[541, 5, 3, 4, 2, 1.5, 0, 60, 441, 850, 0, 0, 0, 0, 0, 0, 0, 0, 0, 850, 3920, 1920, 1360, 0], 
[542, 5, 2, 4, 3, 2.5, 0, 60, 441, 1800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 480, 960, 2880, 0], 
[543, 5, 3, 4, 2, 2.5, 0, 60, 882, 350, 0, 0, 0, 0, 0, 0, 0, 0, 0, 700, 4160, 640, 560, 0],
[544, 5, 4, 2, 3, 1.5, 0, 60, 882, 900, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1100, 960, 7200, 1440, 0],
[545, 5, 2, 3, 4, 1.5, 0, 60, 882, 4E3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 3200, 640, 6400, 0],
[601, 6, 2, 0, 0, 2.5, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[602, 6, 4, 0, 0, 2.5, 0, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[603, 6, 3, 0, 0, 1.5, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[604, 6, 4, 0, 0, 2.5, 0, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[605, 6, 2, 0, 0, 2.5, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[621, 6, 2, 4, 3, 2.5, 0, 120, 972, 2500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 1120, 1920, 4E3, 1120],
[622, 6, 4, 2, 3, 2.5, 0, 90, 972, 1E3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 960, 3680, 1600, 3680],
[623, 6, 3, 2, 4, 1.5, 0, 120, 972, 800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1E3, 5120, 1920, 2400, 5120],
[624, 6, 4, 2, 3, 2.5, 0, 90, 1458, 1800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2E3, 2400, 4480, 2880, 4E3],
[625, 6, 2, 4, 3, 2.5, 0, 60, 1458, 5E3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1300, 800, 1600, 8E3, 6400],
[641, 6, 2, 4, 3, 1.5, 0, 120, 485, 2500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 800, 1120, 1760, 4E3, 1120],
[642, 6, 4, 2, 3, 2.5, 0, 90, 972, 1300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 950, 1440, 3520, 2080, 3520],
[643, 6, 3, 4, 2, 1.5, 0, 90, 972, 650, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1200, 4320, 1600, 1040, 4320],
[644, 6, 4, 2, 3, 1.5, 0, 90, 1458, 2100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2500, 2720, 5120, 3360, 5120],
[645, 6, 2, 4, 3, 2.5, 0, 120, 972, 4500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1200, 480, 1440, 7200, 2880],
[701, 7, 3, 0, 0, 1.5, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[702, 7, 4, 0, 0, 2.5, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[703, 7, 2, 0, 0, 2.5, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[704, 7, 0, 0, 0, 1.5, 0, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[721, 7, 3, 4, 2, 1.5, 0, 120, 1070, 1200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 900, 5760, 2880, 1920, 0],
[722, 7, 4, 2, 3, 2.5, 0, 120, 1070, 1200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1050, 640, 3200, 1920, 0],
[723, 7, 2, 4, 3, 2.5, 0, 120, 1605, 4E3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1800, 1600, 2400, 6400, 0], 
[724, 7, 0, 2, 1, 1.5, 0, 240, 1070, 4500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 550, 0, 0, 48E3, 0],
[741, 7, 0, 3, 2, 2.5, 0, 120, 1070, 1200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 950, 3520, 800, 1920, 0],
[742, 7, 4, 3, 2, 1.5, 0, 120, 1070, 1200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1050, 2880, 6080, 1920, 0],
[743, 7, 2, 4, 3, 2.5, 0, 120, 1605, 5E3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1350, 2720, 3840, 8E3, 0],
[744, 7, 0, 2, 1, .5, 0, 240, 1070, 6E3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 600, 0, 0, 136E3, 0],
[801, 8, 5.5, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[802, 8, 6, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[803, 8, 5.5, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[804, 8, 5.5, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[206, 2, 7, 6, 5, 3.5, 0, 0, 0, 0, 0, 1E4, 1, 12E3, 1300, 2560, 2880, 3200, 0, 0, 0, 0, 0, 0],
[306, 3, 5, 6, 7, 3.5, 0, 0, 0, 0, 0, 12E3, 1, 15E3, 1200, 3520, 1920, 1280, 0, 0, 0, 0, 0, 0],
[408, 4, 6, 5, 7, 2.5, 0, 60, 0, 0, 0, 1E4, 2, 12E3, 1200, 1600, 5760, 1120, 0, 0, 0, 0, 0, 0],
[409, 4, 7, 6, 5, 3.5, 0, 80, 0, 0, 0, 12E3, 2, 15E3, 1E3, 1120, 1600, 6400, 0, 0, 0, 0, 0, 0], 
[413, 4, 7, 0, 0, 5.5, 2.5, 0, 0, 0, 0, 10582, 2, 14789, 500, 0, 0, 2560, 0, 0, 0, 0, 0, 0],
[412, 4, 5, 6, 7, 5.5, 2.5, 0, 0, 0, 0, 10582, 2, 14789, 500, 1440, 400, 240, 0, 0, 0, 0, 0, 0],
[411, 4, 6, 5, 0, 5.5, 2.5, 0, 0, 0, 0, 10582, 2, 14789, 600, 160, 2080, 0, 0, 0, 0, 0, 0, 0], 
[215, 2, 7, 0, 0, 2.5, 0, 0, 0, 0, 0, 3812, 1, 6585, 800, 0, 0, 6400, 0, 0, 0, 0, 0, 0], 
[311, 3, 5, 6, 7, 2.5, 0, 0, 0, 0, 0, 2540, 1, 6570, 900, 3520, 1600, 960, 0, 0, 0, 0, 0, 0], 
[313, 3, 5, 6, 7, 1.5, 0, 40, 0, 0, 0, 2544, 2, 3290, 700, 2880, 1760, 1120, 0, 0, 0, 0, 0, 0], 
[315, 3, 5, 6, 7, 3.5, 0, 40, 0, 0, 0, 2439, 2, 6294, 500, 4160, 640, 480, 0, 0, 0, 0, 0, 0],
[416, 4, 7, 6, 5, 2.5, 0, 80, 0, 0, 0, 3747, 2, 7062, 900, 960, 1280, 3520, 0, 0, 0, 0, 0, 0],
[417, 4, 6, 5, 7, 2.5, 0, 60, 0, 0, 0, 8617, 2, 10428, 1650, 1760, 3680, 1600, 0, 0, 0, 0, 0, 0]],
[[1, 1, 1, 1, 4.18412E-4, .007508716, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2.2, 1.923076923, 1.1, 4.18412E-4, .013215341, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.840909091, 3.893617021],
[3, 3.630909091, 4.307692308, 1.210434783, .001255236, .022526149, 1.208333333, 1.208333333, 1.208333333, 1.208333333, 1.210434783, 1.209090909, 1.209090909, 1.209090909, 1.209090909, 1.21, 3.977272727, 4.787234043],
[4, 5.323636364, 7.230769231, 1.331304348, .001673648, .041448114, 1.333333333, 1.333333333, 1.333333333, 1.333333333, 1.331304348, 1.331818182, 1.331818182, 1.331818182, 1.331818182, 1.331, 6.545454545, 5.989361702],
[5, 7.32, 12.53846154, 1.464347826, .009623474, .063974263, 1.466666667, 1.466666667, 1.466666667, 1.466666667, 1.464347826, 1.463636364, 1.463636364, 1.463636364, 1.463636364, 1.4641, 12.79545455, 7.776595745],
[6, 9.663636364, 22.61538462, 1.610434783, .037657074, .097613312, 1.608333333, 1.608333333, 1.608333333, 1.608333333, 1.610434783, 1.609090909, 1.609090909, 1.609090909, 1.609090909, 1.61051, 16.47727273, 9.574468085],
[7, 12.40181818, 36.07692308, 1.771304348, .060071998, .128849572, 1.775, 1.775, 1.775, 1.775, 1.771304348, 1.772727273, 1.772727273, 1.772727273, 1.772727273, 1.771561, 20.75, 12.17021277],
[8, 15.58909091, 50.46153846, 1.948695652, .084023947, .170081435, 1.95, 1.95, 1.95, 1.95, 1.948695652, 1.95, 1.95, 1.95, 1.95, 1.9487171, 25.86363636, 15.15957447],
[9, 19.29272727, 81.76923077, 2.143478261, .136154657, .210496825, 2.141666667, 2.141666667, 2.141666667, 2.141666667, 2.143478261, 2.145454545, 2.145454545, 2.145454545, 2.145454545, 2.14358881, 33.25, 18.94680851],
[10, 23.58, 101, 2.35826087, .204231986, .260515873, 2.358333333, 2.358333333, 2.358333333, 2.358333333, 2.35826087, 2.359090909, 2.359090909, 2.359090909, 2.359090909, 2.357947691, 41.20454545, 24.34042553],
[11, 25.93818182, 125, 2.593913043, .269586221, .322420635, 2.591666667, 2.591666667, 2.591666667, 2.591666667, 2.593913043, 2.595454545, 2.595454545, 2.595454545, 2.595454545, 2.59374246, 51.70454545, 30.42553191],
[12, 28.53090909, 153.8461538, 2.68186087, .355853812, .396825397, 2.85, 2.85, 2.85, 2.85, 2.852857143, 2.683238636, 2.683238636, 2.683238636, 2.683238636, 2.853116706, 66.47727273, 37.90425532],
[13, 31.38363636, 193.8461538, 2.793052174, .469727032, .5, 3.141666667, 3.141666667, 3.141666667, 3.141666667, 3.138571429, 2.791193182, 2.791193182, 2.791193182, 2.791193182, 3.138428377, 83.75, 47.75531915],
[14, 34.52181818, 244.2307692, 2.968869565, .620039683, .629960317, 3.45, 3.45, 3.45, 3.45, 3.452857143, 2.966761364, 2.966761364, 2.966761364, 2.966761364, 3.452271214, 105.5227273, 60.17021277],
[15, 37.97454545, 307.6923077, 3.151834783, .793650794, .793650794, 3.799479167, 3.799479167, 3.799479167, 3.799479167, 3.797142857, 3.15, 3.15, 3.15, 3.15, 3.797498336, 132.9772727, 75.81914894],
[16, 41.77272727, 387.6923077, 3.383686957, 1, 1, 4.175, 4.175, 4.175, 4.175, 4.177142857, 3.383522727, 3.383522727, 3.383522727, 3.383522727, 4.177248169, 167.5454545, 95.53191489],
[17, 45.95090909, 488.5384615, 3.583930435, 1.260119048, 1.260119048, 4.591666667, 4.591666667, 4.591666667, 4.591666667, 4.594285714, 3.584375, 3.584375, 3.584375, 3.584375, 4.594972986, 211.1136364, 120.3723404],
[18, 50.54545455, 615.6153846, 3.841634783, 1.587896825, 1.587896825, 5.058333333, 5.058333333, 5.058333333, 5.058333333, 5.054285714, 3.841193182, 3.841193182, 3.841193182, 3.841193182, 5.054470285, 266.0227273,
151.6702128], [19, 55.6, 775.6153846, 4.1144, 2.000595238, 2.000595238, 5.558333333, 5.558333333, 5.558333333, 5.558333333, 5.56, 4.113636364, 4.113636364, 4.113636364, 4.113636364, 5.559917313, 335.1590909, 191.106383],
[20, 61.15818182, 977.3076923, 4.403269565, 2.520833333, 2.520833333, 6.116666667, 6.116666667, 6.116666667, 6.116666667, 6.115714286, 4.401704545, 4.401704545, 4.401704545, 4.401704545, 6.115909045, 422.2954545, 240.787234],
[21, 67.27454545, 1231.461538, 4.709478261, 3.176388889, 3.176388889, 6.725, 6.725, 6.725, 6.725, 6.727142857, 4.709090909, 4.709090909, 4.709090909, 4.709090909, 6.727499949, 532.1136364, 303.4042553],
[22, 74.00181818, 1551.615385, 5.106, 4.00218254, 4.00218254, 7.4, 7.4, 7.4, 7.4, 7.4, 5.105965909, 5.105965909, 5.105965909, 5.105965909, 7.400249944, 670.4545455, 382.287234],
[23, 81.40363636, 1955, 5.4538, 5.04265873, 5.04265873, 8.141666667, 8.141666667, 8.141666667, 8.141666667, 8.14, 5.454261364, 5.454261364, 5.454261364, 5.454261364, 8.140274939, 844.7727273, 481.6808511],
[24, 89.54363636, 2463.384615, 5.820043478, 6.353968254, 6.353968254, 8.958333333, 8.958333333, 8.958333333, 8.958333333, 8.954285714, 5.820454545, 5.820454545, 5.820454545, 5.820454545, 8.954302433, 1064.431818, 606.9148936],
[25, 98.49818182, 3103.846154, 6.303721739, 8.005952381, 8.005952381, 9.85, 9.85, 9.85, 9.85, 9.85, 6.303977273, 6.303977273, 6.303977273, 6.303977273, 9.849732676, 1341.181818, 764.7234043],
[26, 108.3472727, 3910.846154, 6.825913043, 10.0875, 10.0875, 10.83333333, 10.83333333, 10.83333333, 10.83333333, 10.83428571, 6.826704545, 6.826704545, 6.826704545, 6.826704545, 10.83470594, 1689.886364, 963.5425532],
[27, 119.1818182, 4927.692308, 7.27013913, 12.71031746, 12.71031746, 11.91666667, 11.91666667, 11.91666667, 11.91666667, 11.91857143, 7.269886364, 7.269886364, 7.269886364, 7.269886364, 11.91817654, 2129.272727, 1213.829787],
[28, 131.1, 6208.846154, 7.86573913, 16.01488095, 16.01488095, 13.10833333, 13.10833333, 13.10833333, 13.10833333, 13.11, 7.865340909, 7.865340909, 7.865340909, 7.865340909, 13.10999419, 2681.818182, 1528.723404],
[29, 144.2090909, 7823.076923, 8.508313043, 20.17857143, 20.17857143, 14.425, 14.425, 14.425, 14.425, 14.42142857, 8.509375, 8.509375, 8.509375, 8.509375, 14.42099361, 3379.545455, 1926.595745],
[30, 158.6309091, 9853.846154, 9.200817391, 25.41666667, 25.41666667, 15.86666667, 15.86666667, 15.86666667, 15.86666667, 15.86285714, 9.200852273, 9.200852273, 9.200852273, 9.200852273, 15.86309297, 4259.090909, 2427.659574],
[31, 174.4945455, 12415.38462, 9.946252174, 32.02380952, 32.025, 17.45, 17.45, 17.45, 17.45, 17.45, 9.946306818, 9.946306818, 9.946306818, 9.946306818, 17.44940227, 5365.909091, 3059.574468],
[32, 191.9436364, 20653.84615, 10.94053043, 53.27380952, 40.3515, 19.19166667, 19.19166667, 19.19166667, 19.19166667, 19.19428571, 10.94119318, 10.94119318, 10.94119318, 10.94119318, 19.1943425, 8925, 5089.361702],
[33, 211.1381818, 21638.46154, 11.8237913, 55.81349206, 50.84289, 21.11666667, 21.11666667, 21.11666667, 21.11666667, 21.11428571, 11.82357955, 11.82357955, 11.82357955, 11.82357955, 21.11377675, 9350, 5330.851064],
[34, 232.2509091, 28561.53846, 12.77386957, 73.67063492, 64.0620414, 23.225, 23.225, 23.225, 23.225, 23.22571429, 12.775, 12.775, 12.775, 12.775, 23.22515442, 12343.18182, 7037.234043],
[35, 255.4763636, 37700, 13.79582609, 97.24206349, 80.71817216, 25.55, 25.55, 25.55, 25.55, 25.54714286, 13.79431818, 13.79431818, 13.79431818, 13.79431818, 25.54766986, 16293.18182, 9289.361702],
[36, 281.0236364, 49761.53846, 15.1754087, 128.3531746, 101.7048969, 28.1, 28.1, 28.1, 28.1, 28.10285714, 15.17357955, 15.17357955, 15.17357955, 15.17357955, 28.10243685, 21506.81818, 12260.6383],
[37, 309.1272727, 65700, 16.38391304, 169.4642857, 128.1481701, 30.91666667, 30.91666667, 30.91666667, 30.91666667, 30.91285714, 16.38409091, 16.38409091, 16.38409091, 16.38409091, 30.91268053, 28393.18182, 16186.17021],
[38, 340.04, 86692.30769, 17.68226087, 223.6111111, 161.4666944, 34, 34, 34, 34, 34.00428571, 17.68210227, 17.68210227, 17.68210227, 17.68210227, 34.00394859, 37454.54545, 21361.70213],
[39, 374.0436364, 114461.5385, 19.45026087, 295.2380952, 203.4480349, 37.40833333, 37.40833333, 37.40833333, 37.40833333, 37.40428571, 19.45028409, 19.45028409, 19.45028409, 19.45028409, 37.40434344, 49454.54545, 28202.12766],
[40, 411.4472727, 151076.9231, 20.98361739, 389.6825397, 256.344524, 41.14166667, 41.14166667, 41.14166667, 41.14166667, 41.14428571, 20.98409091, 20.98409091, 20.98409091, 20.98409091, 41.14477779, 65272.72727, 37223.40426],
[41, 452.5927273, 199461.5385, 22.62956522, 514.484127, 322.9941002, 45.25833333, 45.25833333, 45.25833333, 45.25833333, 45.25857143, 22.62954545, 22.62954545, 22.62954545, 22.62954545, 45.25925557, 86181.81818, 49138.29787],
[42, 497.8509091, 263230.7692, 24.8926087, 678.968254, 406.9725663, 49.78333333, 49.78333333, 49.78333333, 49.78333333, 49.78571429, 24.89318182, 24.89318182, 24.89318182, 24.89318182, 49.78518112, 113750, 64861.70213],
[43, 547.6363636, 347538.4615, 26.83410435, 896.4285714, 512.7854335, 54.76145833, 54.76145833, 54.76145833, 54.76145833, 54.76428571, 26.83409091, 26.83409091, 26.83409091, 26.83409091, 54.76369924, 150159.0909, 85627.65957],
[44, 602.4, 458692.3077, 29.5176, 1183.134921, 646.1096462, 60.2375, 60.2375, 60.2375, 60.2375, 60.24, 29.51704545, 29.51704545, 29.51704545, 29.51704545, 60.24006916, 198227.2727, 113031.9149],
[45, 662.64, 605538.4615, 31.80688696, 1561.904762, 814.0981542, 66.26145833, 66.26145833, 66.26145833, 66.26145833, 66.26428571, 31.78977273, 31.78977273, 31.78977273, 31.78977273, 66.26407608, 261681.8182, 149202.1277],
[46, 728.9054545, 799230.7692, 34.9874087, 2061.507937, 1025.763674, 72.8875, 72.8875, 72.8875, 72.8875, 72.89, 34.97159091, 34.97159091, 34.97159091, 34.97159091, 72.89048369, 345227.2727, 196914.8936],
[47, 801.7945455, 1054615.385, 37.6841913, 2720.238095, 1292.46223, 80.17604167, 80.17604167, 80.17604167, 80.17604167, 80.18, 37.67045455, 37.67045455, 37.67045455, 37.67045455, 80.17953205, 455909.0909, 259893.617],
[48, 881.9745455, 1392307.692, 40.5708, 3591.269841, 1628.502409, 88.19375, 88.19375, 88.19375, 88.19375, 88.19714286, 40.56818182, 40.56818182, 40.56818182, 40.56818182, 88.19748526, 601818.1818, 343085.1064], 
[49, 970.1727273, 1838461.538, 44.628, 4742.063492, 2051.913036, 97.01302083, 97.01302083, 97.01302083, 97.01302083, 97.01714286, 44.60227273, 44.60227273, 44.60227273, 44.60227273, 97.01723378, 794318.1818, 452872.3404],
[50, 1067.189091, 2426153.846, 48.0236087, 6257.936508, 2585.410425, 106.7145833, 106.7145833, 106.7145833, 106.7145833, 106.7185714, 48.01136364, 48.01136364, 48.01136364, 48.01136364, 106.7189572, 1048409.091, 597765.9574],
[51, 1173.909091, 3203076.923, 52.82569565, 8261.904762, 3257.617135, 117.3859375, 117.3859375, 117.3859375, 117.3859375, 117.3914286, 52.8125, 52.8125, 52.8125, 52.8125, 117.3908529, 1384090.909, 789042.5532],
[52, 1291.3, 4227692.308, 58.10830435, 10904.7619, 4104.597591, 129.1244792, 129.1244792, 129.1244792, 129.1244792, 129.13, 58.09659091, 58.09659091, 58.09659091, 58.09659091, 129.1299382, 1827045.455, 1041702.128],
[53, 1420.429091, 5580769.231, 63.91913478, 14394.84127, 5171.792964, 142.0369792, 142.0369792, 142.0369792, 142.0369792, 142.043, 63.90625, 63.90625, 63.90625, 63.90625, 142.042932, 2411590.909, 1375E3],
[54, 1562.472727, 7366923.077, 70.31104826, 19001.98413, 6516.459135, 156.240625, 156.240625, 156.240625, 156.240625, 156.2473, 70.296875, 70.296875, 70.296875, 70.296875, 156.2472252, 3183409.091, 1814893.617],
[55, 1718.72, 9723076.923, 77.34248352, 25079.36508, 8210.73851, 171.8645833, 171.8645833, 171.8645833, 171.8645833, 171.8727643, 77.32689287, 77.32689287, 77.32689287, 77.32689287, 171.8719477, 4202272.727, 2395744.681],
[56, 1890.590909, 1.283076923E7, 85.07660869, 33095.2381, 10345.53052, 189.0510417, 189.0510417, 189.0510417, 189.0510417, 189.059767, 85.059459, 85.059459, 85.059459, 85.059459, 189.0591425, 5547727.273, 3162765.957],
[57, 2079.650909, 1.693846154E7, 93.58434783, 43690.47619, 13035.36846, 207.95625, 207.95625, 207.95625, 207.95625, 207.9659176, 93.56548315, 93.56548315, 93.56548315, 93.56548315, 207.9650567, 7320454.545, 4174468.085],
[58, 2287.616364, 2.236153846E7, 102.9427826, 57678.57143, 16424.56426, 228.7520833, 228.7520833, 228.7520833, 228.7520833, 228.7625094, 102.9220315, 102.9220315, 102.9220315, 102.9220315, 228.7615624, 9663636.364, 5511702.128],
[59, 2516.376364, 2.952307692E7, 113.2368261, 76150.79365, 20694.95096, 251.6270833, 251.6270833, 251.6270833, 251.6270833, 251.6382386, 113.2139999, 113.2139999, 113.2139999, 113.2139999, 251.6377186, 1.275681818E7, 7274468.085], 
[60, 2768.014545, 3.896923077E7, 124.5607826, 100515.873, 26075.63822, 276.7895833, 276.7895833, 276.7895833, 276.7895833, 276.8026711, 124.5356737, 124.5356737, 124.5356737, 124.5356737, 276.8014905, 1.683863636E7, 9602127.66],
[61, 3044.816364, 5.143846154E7, 137.0167826, 132678.5714, 32855.30415, 304.46875, 304.46875, 304.46875, 304.46875, 304.4827643, 136.9891628, 136.9891628, 136.9891628, 136.9891628, 304.4816395, 2.222727273E7, 1.267446809E7], 
[62, 3349.298182, 679E5, 150.7183043, 175138.8889, 41397.68323, 334.915625, 334.915625, 334.915625, 334.915625, 334.9306929, 150.6879226, 150.6879226, 150.6879226, 150.6879226, 334.9298035, 2.934090909E7, 1.672978723E7], 
[63, 3684.227273, 8.961538462E7, 165.7901739, 231150.7937, 52161.08087, 368.4072917, 368.4072917, 368.4072917, 368.4072917, 368.4238492, 165.756754, 165.756754, 165.756754, 165.756754, 368.4227838, 3.872727273E7, 2.207446809E7],
[64, 4052.650909, 1.183076923E8, 182.3693478, 305158.7302, 65722.9619, 405.2479167, 405.2479167, 405.2479167, 405.2479167, 405.2665819, 182.3325859, 182.3325859, 182.3325859, 182.3325859, 405.2650622, 5.111363636E7, 2.913829787E7],
[65, 4457.916364, 1.561538462E8, 200.606087, 402777.7778, 82810.93199, 445.7729167, 445.7729167, 445.7729167, 445.7729167, 445.7928053, 200.5656489, 200.5656489, 200.5656489, 200.5656489, 445.7915685, 6.747727273E7, 3.84787234E7],
[66, 4903.708, 2.061230769E8, 220.6666957, 531666.6667, 104341.7743, 490.3502083, 490.3502083, 490.3502083, 490.3502083, 490.3720859, 220.6222138, 220.6222138, 220.6222138, 220.6222138, 490.3707253, 8907E4, 5.079191489E7],
[67, 5394.0788, 2.720824615E8, 242.7333652, 701800, 131470.6356, 539.3852292, 539.3852292, 539.3852292, 539.3852292, 539.4092945, 242.6844352, 242.6844352, 242.6844352, 242.6844352, 539.4077978, 117572400, 6.704532766E7],
[68, 5933.48668, 3.591488492E8, 267.0067017, 926376, 165653.0009, 593.3237521, 593.3237521, 593.3237521, 593.3237521, 593.3502239, 266.9528787, 266.9528787, 266.9528787, 266.9528787, 593.3485776, 155195568, 8.849983251E7],
[69, 6526.835348, 474076481, 293.7073719, 1222816.32, 208722.7811, 652.6561273, 652.6561273, 652.6561273, 652.6561273, 652.6852463, 293.6481665, 293.6481665, 293.6481665, 293.6481665, 652.6834354, 2.048581498E8, 1.168197789E8],
[70, 7179.518883, 6.257809549E8, 323.0781091, 1614117.542, 262990.7042, 717.92174, 717.92174, 717.92174, 717.92174, 717.9537709, 323.0129832, 323.0129832, 323.0129832, 323.0129832, 717.9517789, 2.704127577E8, 1.542021082E8]],
[[1, 1.1514375, 1.324153125, 1.522776094, 1.751192508, 2.013871384, 2.315952092, 2.663344905, 3.062846641, 3.522273637, 4.050614683, 4.658206885, 5.356937918, 6.160478606, 7.084550397, 8.147232956, 9.3693179, 10.77471558, 12.39092292, 14.24956136, 16.38699556, 18.8450449, 21.67180163, 24.92257188, 28.66095766, 32.96010131, 37.90411651, 43.58973398, 50.12819408, 57.64742319, 66.29453667, 76.23871717, 87.67452475, 100.8257035, 115.949559, 133.3419928, 153.3432918, 176.3447855, 202.7965033, 233.2159788, 268.1983757, 308.428132, 354.6923518, 407.8962046, 469.0806353, 539.4427306, 620.3591402, 713.4130112, 820.4249629, 943.4887073, 1085.012013, 1247.763815, 1434.928388, 1650.167646, 1897.692793, 2182.346712, 2509.698718, 2886.153526, 3319.076555, 3816.938038, 4389.478744, 5047.900556, 5805.085639, 6675.848485, 7677.225758],
[.917431193, 1.056364679, 1.214819381, 1.397042288, 1.606598631, 1.847588426, 2.12472669, 2.443435693, 2.809951047, 3.231443704, 3.71616026, 4.273584298, 4.914621943, 5.651815235, 6.49958752, 7.474525648, 8.595704495, 9.885060169, 11.36781919, 13.07299207, 15.03394089, 17.28903202, 19.88238682, 22.86474484, 26.29445657, 30.23862506, 34.77441881, 39.99058164, 45.98916888, 52.88754421, 60.82067585, 69.94377722, 80.43534381, 92.50064538, 106.3757422, 122.3321035, 140.681919, 161.7842069, 186.0518379, 213.9596136, 246.0535557, 282.961589, 325.4058274, 374.2167015, 430.3492067, 494.9015877, 569.1368258, 654.5073497, 752.6834522, 865.58597, 995.4238655, 1144.737445, 1316.448062, 1513.915271, 1741.002562, 2002.152946, 2302.475888, 2647.847272, 3045.024362, 3501.778017, 4027.044719, 4631.101427, 5325.766641, 6124.631638, 7043.326383],
[.841679993, .969141907, 1.114513193, 1.281690172, 1.473943698, 1.695035253, 1.949290541, 2.241684122, 2.57793674, 2.964627251, 3.409321339, 3.92071954, 4.508827471, 5.185151591, 5.96292433, 6.85736298, 7.885967427, 9.068862541, 10.42919192, 11.99357071, 13.79260632, 15.86149726, 18.24072185, 20.97683013, 24.12335465, 27.74185785, 31.90313653, 36.68860701, 42.19189806, 48.52068276, 55.79878518, 64.16860296, 73.7938934, 84.86297741, 97.59242402, 112.2312876, 129.0659808, 148.4258779, 170.6897596, 196.2932235, 225.737207, 259.5977881, 298.5374563, 343.3180747, 394.8157859, 454.0381538, 522.1438769, 600.4654585, 690.5352772, 794.1155688, 913.2329041, 1050.21784, 1207.750516, 1388.913093, 1597.250057, 1836.837566, 2112.3632, 2429.21768, 2793.600333, 3212.640382, 3694.53644, 4248.716906, 4886.024442, 5618.928108, 6461.767324],
[.77218348, .889121016, 1.022489168, 1.175862543, 1.352241925, 1.555078214, 1.788339946, 2.056590938, 2.365079578, 2.719841515, 3.127817742, 3.596990404, 4.136538964, 4.757019809, 5.47057278, 6.291158697, 7.234832502, 8.320057377, 9.568065983, 11.00327588, 12.65376726, 14.55183235, 16.73460721, 19.24479829, 22.13151803, 25.45124573, 29.26893259, 33.65927248, 38.70816335, 44.51438786, 51.19154604, 58.87027794, 67.70081963, 77.85594258, 89.53433396, 102.9644841, 118.4091567, 136.1705302, 156.5961097, 180.0855261, 207.0983551, 238.1631083, 273.8875746, 314.9707108, 362.2163174, 416.548765, 479.0310797, 550.8857417, 633.518603, 728.5463934, 837.8283524, 963.5026053, 1108.027996, 1274.232195, 1465.367025, 1685.172078, 1937.94789, 2228.640074, 2562.936085, 2947.376498, 3389.482972, 3897.905418, 4482.591231, 5154.979915, 5928.226903],
[.708425211, .815707354, .938063457, 1.078772976, 1.240588922, 1.42667726, 1.640678849, 1.886780677, 2.169797778, 2.495267445, 2.869557562, 3.299991196, 3.794989875, 4.364238357, 5.01887411, 5.771705227, 6.637461011, 7.633080162, 8.778042186, 10.09474851, 11.60896079, 13.35030491, 15.35285065, 17.65577824, 20.30414498, 23.34976673, 26.85223174, 30.8800665, 35.51207647, 40.83888794, 46.96472113, 54.0094293, 62.1108437, 71.42747025, 82.14159079, 94.46282941, 108.6322538, 124.9270919, 143.6661557, 165.216079, 189.9984909, 218.4982645, 251.2730042, 288.9639548, 332.3085481, 382.1548303, 439.4780548, 505.399763, 581.2097275, 668.3911866, 768.6498646, 883.9473443, 1016.539446, 1169.020363, 1344.373417, 1546.02943, 1777.933844, 2044.623921, 2351.317509, 2704.015135, 3109.617406, 3576.060017, 4112.469019, 4729.339372, 5438.740278],
[.649931386, .748355371, .860608676, .989699978, 1.138154974, 1.30887822, 1.505209953, 1.730991447, 1.990640163, 2.289236188, 2.632621616, 3.027514859, 3.481642087, 4.003888401, 4.604471661, 5.29514241, 6.089413771, 7.002825837, 8.053249712, 9.261237169, 10.65042274, 12.24798616, 14.08518408, 16.19796169, 18.62765595, 21.42180434, 24.63507499, 28.33033624, 32.57988667, 37.46686967, 43.08690012, 49.54993514, 56.98242541, 65.52978922, 75.35925761, 86.66314625, 99.66261819, 114.6120109, 131.8038126, 151.5743844, 174.3105421, 200.4571234, 230.5256919, 265.1045457, 304.8702276, 350.6007617, 403.190876, 463.6695074, 533.2199335, 613.2029235, 705.183362, 810.9608663, 932.6049963, 1072.495746, 1233.370108, 1418.375624, 1631.131967, 1875.801762, 2157.172027, 2480.747831, 2852.860005, 3280.789006, 3772.907357, 4338.843461, 4989.66998],
[.596267327, .68656456, .789549244, .907981631, 1.044178875, 1.200805707, 1.380926563, 1.588065547, 1.826275379, 2.100216686, 2.415249189, 2.777536568, 3.194167053, 3.673292111, 4.224285927, 4.857928816, 5.586618139, 6.424610859, 7.388302488, 8.496547862, 9.771030041, 11.23668455, 12.92218723, 14.86051531, 17.08959261, 19.6530315, 22.60098623, 25.99113416, 29.88980429, 34.37327493, 39.52926617, 45.45865609, 52.27745451, 60.11907268, 69.13693359, 79.50747362, 91.43359467, 105.1486339, 120.9209289, 139.0590683, 159.9179285, 183.9056178, 211.4914605, 243.2151796, 279.6974565, 321.652075, 369.8998862, 425.3848691, 489.1925995, 562.5714894, 646.9572129, 744.0007948, 855.600914, 983.9410511, 1131.532209, 1301.26204, 1496.451346, 1720.919048, 1979.056905, 2275.915441, 2617.302757, 3009.898171, 3461.382896, 3980.590331, 4577.67888],
[.547034245, .629875743, .724357105, .833010671, .957962271, 1.101656612, 1.266905104, 1.456940869, 1.675481999, 1.926804299, 2.215824944, 2.548198686, 2.930428489, 3.369992762, 3.875491676, 4.456815428, 5.125337742, 5.894138403, 6.778259164, 7.794998038, 8.964247744, 10.30888491, 11.85521764, 13.63350029, 15.67852533, 18.03030413, 20.73484975, 23.84507721, 27.42183879, 31.53511461, 36.26538181, 41.70518908, 47.96096744, 55.15511255, 63.42837944, 72.94263635, 83.8840318, 96.46663658, 110.9366321, 127.5771269, 146.7136959, 168.7207503, 194.0288628, 223.1331923, 256.6031711, 295.0936468, 339.3576938, 390.2613478, 448.80055, 516.1206325, 593.5387274, 682.5695365, 784.954967, 902.698212, 1038.102944, 1193.818385, 1372.891143, 1578.824815, 1815.648537, 2087.995817, 2401.19519, 2761.374469, 3175.580639, 3651.917735, 4199.705395],
[.50186628, .577867654, .664547803, .764229973, .878864469, 1.010694139, 1.16229826, 1.336642999, 1.537139449, 1.767710366, 2.032866921, 2.337796959, 2.688466503, 3.091736479, 3.555496951, 4.088821493, 4.702144717, 5.407466425, 6.218586389, 7.151374347, 8.224080499, 9.457692574, 10.87634646, 12.50779843, 14.38396819, 16.54156342, 19.02279794, 21.87621763, 25.15765027, 28.93129781, 33.27099248, 38.26164135, 44.00088756, 50.60102069, 58.19117379, 66.91984986, 76.95782734, 88.50150145, 101.7767267, 117.0432357, 134.599721, 154.7896792, 178.008131, 204.7093507, 235.4157533, 270.7281163, 311.3373337, 358.0379338, 411.7436239, 473.5051674, 544.5309426, 626.2105839, 720.1421715, 828.1634973, 952.3880219, 1095.246225, 1259.533159, 1448.463133, 1665.732603, 1915.592493, 2202.931367, 2533.371072, 2913.376733, 3350.383243, 3852.940729],
[.46042778, .530153811, .609676883, .701128416, .806297678, .92724233, 1.066328679, 1.226277981, 1.410219678, 1.62175263, 1.865015524, 2.144767853, 2.466483031, 2.836455485, 3.261923808, 3.751212379, 4.313894236, 4.960978372, 5.705125127, 6.560893896, 7.545027981, 8.676782178, 9.978299505, 11.47504443, 13.19630109, 15.17574626, 17.4521082, 20.06992443, 23.08041309, 26.54247506, 30.52384631, 35.10242326, 40.36778675, 46.42295476, 53.38639798, 61.39435767, 70.60351132, 81.19403802, 93.37314373, 107.3791153, 123.4859826, 142.00888, 163.310212, 187.8067438, 215.9777553, 248.3744186, 285.6305814, 328.4751686, 377.7464439, 434.4084105, 499.5696721, 574.5051229, 660.6808913, 759.783025, 873.7504788, 1004.813051, 1155.535008, 1328.865259, 1528.195048, 1757.424306, 2021.037951, 2324.193644, 2672.822691, 3073.746094, 3534.808008],
[.422410807, .486379643, .55933659, .643237078, .73972264, .850681036, .978283192, 1.12502567, 1.293779521, 1.487846449, 1.711023417, 1.967676929, 2.262828468, 2.602252739, 2.99259065, 3.441479247, 3.957701134, 4.551356304, 5.23405975, 6.019168712, 6.922044019, 7.960350622, 9.154403215, 10.5275637, 12.10669825, 13.92270299, 16.01110844, 18.4127747, 21.17469091, 24.35089455, 28.00352873, 32.20405804, 37.03466674, 42.58986675, 48.97834677, 56.32509878, 64.7738636, 74.48994314, 85.66343461, 98.5129498, 113.2898923, 130.2833761, 149.8258825, 172.2997649, 198.1447296, 227.8664391, 262.046405, 301.3533657, 346.5563706, 398.5398261, 458.3208001, 527.0689201, 606.1292581, 697.0486468, 801.6059438, 921.8468354, 1060.123861, 1219.14244, 1402.013806, 1612.315877, 1854.163258, 2132.287747, 2452.130909, 2819.950545, 3242.943127],
[.38753285, .446219856, .513152835, .59012576, .678644624, .780441318, .897507515, 1.032133643, 1.186953689, 1.364996742, 1.569746254, 1.805208192, 2.075989421, 2.387387834, 2.745496009, 3.15732041, 3.630918472, 4.175556242, 4.801889679, 5.52217313, 6.3504991, 7.303073965, 8.39853506, 9.658315319, 11.10706262, 12.77312201, 14.68909031, 16.89245386, 19.42632194, 22.34027023, 25.69131076, 29.54500737, 33.97675848, 39.07327225, 44.93426309, 51.67440255, 59.42556294, 68.33939738, 78.59030698, 90.37885303, 103.935681, 119.5260331, 137.4549381, 158.0731788, 181.7841556, 209.051779, 240.4095458, 276.4709777, 317.9416244, 365.632868, 420.4777982, 483.549468, 556.0818882, 639.4941714, 735.4182971, 845.7310416, 972.5906979, 1118.479303, 1286.251198, 1479.188878, 1701.067209, 1956.227291, 2249.661384, 2587.110592, 2975.177181],
[.346011474, .398410586, .458172174, .526898, .6059327, .696822605, .801345996, .921547895, 1.05978008, 1.218747091, 1.401559155, 1.611793028, 1.853561983, 2.13159628, 2.451335722, 2.81903608, 3.241891493, 3.728175216, 4.287401499, 4.930511724, 5.670088482, 6.520601755, 7.498692018, 8.62349582, 9.917020193, 11.40457322, 13.11525921, 15.08254809, 17.3449303, 19.94666984, 22.93867032, 26.37947087, 30.3363915, 34.88685022, 40.11987776, 46.13785942, 53.05853834, 61.01731909, 70.16991695, 80.69540449, 92.79971517, 106.7196724, 122.7276233, 141.1367668, 162.3072818, 186.6533741, 214.6513802, 246.8490872, 283.8764503, 326.4579179, 375.4266056, 431.7405964, 496.5016859, 570.9769387, 656.6234795, 755.1170015, 868.3845517, 998.6422344, 1148.43857, 1320.704355, 1518.810008, 1746.63151, 2008.626236, 2309.920171, 2656.408197],
[.308938816, .355723738, .409082298, .470444643, .541011339, .62216304, .715487496, .822810621, .946232214, 1.088167046, 1.251392103, 1.439100918, 1.654966056, 1.903210964, 2.188692609, 2.5169965, 2.894545975, 3.328727872, 3.828037053, 4.40224261, 5.062579002, 5.821965852, 6.69526073, 7.69954984, 8.854482316, 10.18265466, 11.71005286, 13.46656079, 15.48654491, 17.80952665, 20.48095564, 23.55309899, 27.08606384, 31.14897342, 35.82131943, 41.19451734, 47.37369494, 54.47974918, 62.65171156, 72.0494683, 82.85688854, 95.28542182, 109.5782351, 126.0149704, 144.9172159, 166.6547983, 191.653018, 220.4009708, 253.4611164, 291.4802838, 335.2023264, 385.4826754, 443.3050767, 509.8008382, 586.2709639, 674.2116085, 775.3433497, 891.6448522, 1025.39158, 1179.200317, 1356.080365, 1559.492419, 1793.416282, 2062.428724, 2371.793033],
[.275838228, .31761048, .365252052, .42003986, .483045839, .555502715, .638828122, .73465234, .844850191, .97157772, 1.117314378, 1.284911534, 1.477648264, 1.699295504, 1.954189829, 2.247318304, 2.58441605, 2.972078457, 3.417890225, 3.930573759, 4.520159823, 5.198183797, 5.977911366, 6.874598071, 7.905787782, 9.091655949, 10.45540434, 12.02371499, 13.82727224, 15.90136308, 18.28656754, 21.02955267, 24.18398557, 27.81158341, 31.98332092, 36.78081905, 42.29794191, 48.6426332, 55.93902818, 64.32988241, 73.97936477, 85.07626948, 97.83770991, 112.5133664, 129.3903714, 148.7989271, 171.1187661, 196.786581, 226.3045682, 260.2502534, 299.2877914, 344.1809601, 395.8081042, 455.1793198, 523.4562177, 601.9746504, 692.270848, 796.1114752, 915.5281964, 1052.857426, 1210.78604, 1392.403946, 1601.264538, 1841.454218, 2117.672351],
[.246284132, .283580786, .326117904, .375035589, .431290927, .495984567, .570382252, .655939589, .754330528, .867480107, .997602123, 1.147242441, 1.319328807, 1.517228128, 1.744812348, 2.0065342, 2.30751433, 2.653641479, 3.051687701, 3.509440857, 4.035856985, 4.641235533, 5.337420863, 6.138033992, 7.058739091, 8.117549954, 9.335182448, 10.73545981, 12.34577879, 14.19764561, 16.32729245, 18.77638631, 21.59284426, 24.8317709, 28.55653653, 32.84001701, 37.76601957, 43.4309225, 49.94556088, 57.43739501, 66.05300426, 75.9609549, 87.35509813, 100.4583628, 115.5271173, 132.8561849, 152.7846126, 175.7023045, 202.0576502, 232.3662977, 267.2212423, 307.3044287, 353.400093, 406.4101069, 467.371623, 537.4773664, 618.0989714, 710.8138171, 817.4358897, 940.0512731, 1081.058964, 1243.217809, 1429.70048, 1644.155552, 1890.778885],
[.219896547, .25319713, .2911767, .334853205, .385081185, .442843363, .509269867, .585660348, .6735094, .77453581, .890716181, 1.024323608, 1.177972149, 1.354667972, 1.557868168, 1.791548393, 2.060280652, 2.369322749, 2.724721162, 3.133429336, 3.603443737, 4.143960297, 4.765554342, 5.480387493, 6.302445617, 7.247812459, 8.334984328, 9.585231977, 11.02301677, 12.67646929, 14.57793968, 16.76463064, 19.27932523, 22.17122402, 25.49690762, 29.32144376, 33.71966033, 38.77760938, 44.59425078, 51.2833884, 58.97589666, 67.82228116, 77.99562333, 89.69496683, 103.1492119, 118.6215936, 136.4148327, 156.8770576, 180.4086162, 207.4699086, 238.5903949, 274.3789542, 315.5357973, 362.8661669, 417.296092, 479.8905057, 551.8740816, 634.6551938, 729.8534729, 839.3314939, 965.2312179, 1110.015901, 1276.518286, 1467.996029, 1688.195433],
[.196336202, .226068866, .259979196, .298976075, .343822487, .39539586, .454705239, .522911025, .601347678, .69154983, .795282305, .91457465, 1.051760848, 1.209524975, 1.390953721, 1.599596779, 1.839536296, 2.115466741, 2.432786752, 2.797704764, 3.217360479, 3.699964551, 4.254959234, 4.893203119, 5.627183586, 6.471261124, 7.441950293, 8.558242837, 9.841979263, 11.31827615, 13.01601757, 14.96842021, 17.21368324, 19.79573573, 22.76509609, 26.1798605, 30.10683958, 34.62286551, 39.81629534, 45.78873964, 52.65705059, 60.55560818, 69.6389494, 80.08479181, 92.09751058, 105.9121372, 121.7989577, 140.0688014, 161.0791216, 185.2409899, 213.0271383, 244.9812091, 281.7283905, 323.987649, 372.5857964, 428.4736658, 492.7447157, 566.6564231, 651.6548865, 749.4031195, 861.8135874, 991.0856256, 1139.748469, 1310.71074, 1507.317351],
[.175300181, .201847202, .232124282, .266942925, .306984363, .353032018, .40598682, .466884843, .53691757, .617455205, .710073486, .816584509, .939072185, 1.079933013, 1.241922965, 1.42821141, 1.642443122, 1.88880959, 2.172131028, 2.497950683, 2.872643285, 3.303539778, 3.799070744, 4.368931356, 5.024271059, 5.777911718, 6.644598476, 7.641288247, 8.787481484, 10.10560371, 11.62144426, 13.3646609, 15.36936004, 17.67476404, 20.32597865, 23.37487545, 26.88110677, 30.91327278, 35.5502637, 40.88280325, 47.01522374, 54.0675073, 62.1776334, 71.5042784, 82.22992016, 94.56440819, 108.7490694, 125.0614298, 143.8206443, 165.393741, 190.2028021, 218.7332224, 251.5432058, 289.2746866, 332.6658896, 382.5657731, 439.950639, 505.9432349, 581.8347201, 669.1099281, 769.4764174, 884.89788, 1017.632562, 1170.277446, 1345.819063],
[.156518019, .180220716, .207253823, .238341897, .274093181, .315207159, .362488232, .416861467, .479390687, .551299291, .633994184, .729093312, .838457308, .964225905, 1.10885979, 1.275188759, 1.466467073, 1.686437134, 1.939402704, 2.230313109, 2.564860076, 2.949589087, 3.39202745, 3.900831568, 4.485956303, 5.158849748, 5.932677211, 6.822578792, 7.845965611, 9.022860453, 10.37628952, 11.93273295, 13.72264289, 15.78103932, 18.14819522, 20.87042451, 24.00098818, 27.60113641, 31.74130687, 36.5025029, 41.97787834, 48.27456009, 55.5157441, 63.84310572, 73.41957158, 84.43250731, 97.09738341, 111.6619909, 128.4112896, 147.672983, 169.8239304, 195.29752, 224.592148, 258.2809702, 297.0231157, 341.5765831, 392.8130706, 451.7350312, 519.4952858, 597.4195787, 687.0325155, 790.0873928, 908.6005018, 1044.890577, 1201.624164],
[.139748231, .160911354, .185048057, .212805265, .244726055, .281434963, .323650208, .372197739, .428027399, .492231509, .566066236, .650976171, .748622597, .860915986, .990053384, 1.138561392, 1.309345601, 1.505747441, 1.731609557, 1.991350991, 2.290053639, 2.633561685, 3.028595938, 3.482885328, 4.005318128, 4.606115847, 5.297033224, 6.091588207, 7.005326439, 8.056125404, 9.264544215, 10.65422585, 12.25235972, 14.09021368, 16.20374574, 18.6343076, 21.42945373, 24.6438718, 28.34045256, 32.59152045, 37.48024852, 43.10228579, 49.56762866, 57.00277296, 65.55318891, 75.38616724, 86.69409233, 99.69820618, 114.6529371, 131.8508777, 151.6285093, 174.3727857, 200.5287036, 230.6080091, 265.1992105, 304.9790921, 350.7259559, 403.3348492, 463.8350766, 533.4103381, 613.4218888, 705.4351722, 811.250448, 932.9380152, 1072.878717],
[.124775206, .143670851, .165221479, .190004701, .218505406, .251281217, .2889734, .33231941, .382167321, .439492419, .505416282, .581228724, .668413033, .768674988, .883976236, 1.016572671, 1.169058572, 1.344417358, 1.546079962, 1.777991956, 2.044690749, 2.351394362, 2.704103516, 3.109719043, 3.5761769, 4.112603435, 4.72949395, 5.438918042, 6.254755749, 7.192969111, 8.271914478, 9.512701649, 10.9396069, 12.58054793, 14.46763012, 16.63777464, 19.13344083, 22.00345696, 25.3039755, 29.09957183, 33.4645076, 38.48418374, 44.25681131, 50.895333, 58.52963295, 67.3090779, 77.40543958, 89.01625552, 102.3686938, 117.7239979, 135.3825976, 155.6899873, 179.0434853, 205.9000081, 236.7850094, 272.3027608, 313.1481749, 360.1204011, 414.1384613, 476.2592305, 547.698115, 629.8528323, 724.3307571, 832.9803707, 957.9274263],
[.111406434, .128277546, .147519178, .169647054, .195094113, .224358229, .258011964, .296713759, .341220822, .392403946, .451264537, .518954218, .596797351, .686316953, .789264496, .907654171, 1.043802297, 1.200372641, 1.380428537, 1.587492818, 1.82561674, 2.099459251, 2.414378139, 2.77653486, 3.193015089, 3.671967352, 4.222762455, 4.856176824, 5.584603347, 6.422293849, 7.385637926, 8.493483615, 9.767506158, 11.23263208, 12.91752689, 14.85515593, 17.08342932, 19.64594371, 22.59283527, 25.98176056, 29.87902465, 34.36087834, 39.51501009, 45.44226161, 52.25860085, 60.09739098, 69.11199962, 79.47879957, 91.4006195, 105.1107124, 120.8773193, 139.0089172, 159.8602548, 183.839293, 211.4151869, 243.127465, 279.5965847, 321.5360724, 369.7664833, 425.2314558, 489.0161741, 562.3686003, 646.7238903, 743.7324738, 855.2923449],
[.09947003, .114533523, .131713552, .151470584, .174191172, .200319848, .230367825, .264922999, .304661448, .350360666, .402914766, .46335198, .532854777, .612782994, .704700443, .81040551, .931966336, 1.071761287, 1.23252548, 1.417404302, 1.630014947, 1.874517189, 2.155694767, 2.479048982, 2.850906329, 3.278542279, 3.770323621, 4.335872164, 4.986252988, 5.734190937, 6.594319577, 7.583467514, 8.720987641, 10.02913579, 11.53350615, 13.26353208, 15.25306189, 17.54102117, 20.17217435, 23.1980005, 26.67770058, 30.67935566, 35.28125901, 40.57344787, 46.65946505, 53.6583848, 61.70714252, 70.9632139, 81.60769599, 93.84885038, 107.9261779, 124.1151046, 142.7323703, 164.1422259, 188.7635598, 217.0780937, 249.6398078, 287.0857789, 330.1486458, 379.6709427, 436.6215841, 502.1148217, 577.4320449, 664.0468516, 763.6538794],
[.088812527, .102262074, .117601385, .135241593, .155527832, .178857007, .205685558, .236538392, .27201915, .312822023, .359745326, .413707125, .475763194, .547127673, .629196824, .723576348, .8321128, .95692972, 1.100469178, 1.265539555, 1.455370488, 1.673676061, 1.924727471, 2.213436591, 2.54545208, 2.927269892, 3.366360376, 3.871314432, 4.452011597, 5.119813336, 5.887785337, 6.770953137, 7.786596108, 8.954585524, 10.29777335, 11.84243936, 13.61880526, 15.66162605, 18.01086995, 20.71250045, 23.81937552, 27.39228184, 31.50112412, 36.22629274, 41.66023665, 47.90927214, 55.09566297, 63.36001241, 72.86401427, 83.79361641, 96.36265888, 110.8170577, 127.4396164, 146.5555588, 168.5388926, 193.8197265, 222.8926855, 256.3265883, 294.7755766, 338.9919131, 389.8407, 448.3168051, 515.5643258, 592.8989747, 681.8338209],
[.079296899, .091305423, .105001237, .120751422, .138864136, .159693756, .18364782, .211194993, .242874241, .279305378, .321201184, .369381362, .424788566, .488506851, .561782879, .646050311, .742957857, .854401536, .982561766, 1.129946031, 1.299437936, 1.494353626, 1.71850667, 1.976282671, 2.272725071, 2.613633832, 3.005678907, 3.456530743, 3.975010354, 4.571261907, 5.256951194, 6.045493873, 6.952317953, 7.995165646, 9.194440493, 10.57360657, 12.15964755, 13.98359469, 16.08113389, 18.49330397, 21.26729957, 24.4573945, 28.12600368, 32.34490423, 37.19663986, 42.77613584, 49.19255622, 56.57143965, 65.0571556, 74.81572894, 86.03808828, 98.94380152, 113.7853718, 130.8531775, 150.4811541, 173.0533273, 199.0113264, 228.8630253, 263.1924791, 302.671351, 348.0720536, 400.2828617, 460.3252909, 529.3740845, 608.7801972],
[.070800803, .081522699, .093751104, .10781377, .123985836, .142583711, .163971268, .188566958, .216852001, .249379801, .286786772, .329804787, .379275506, .436166831, .501591856, .576830635, .66335523, .762858514, .877287291, 1.008880385, 1.160212443, 1.334244309, 1.534380956, 1.764538099, 2.029218814, 2.333601636, 2.683641881, 3.086188163, 3.549116388, 4.081483846, 4.693706423, 5.397762386, 6.207426744, 7.138540756, 8.209321869, 9.44072015, 10.85682817, 12.4853524, 14.35815526, 16.51187855, 18.98866033, 21.83695938, 25.11250328, 28.87937878, 33.21128559, 38.19297843, 43.9219252, 50.51021398, 58.08674607, 66.79975798, 76.81972168, 88.34267993, 101.5940819, 116.8331942, 134.3581733, 154.5118993, 177.6886842, 204.3419869, 234.9932849, 270.2422777, 310.7786193, 357.3954122, 411.004724, 472.6554326, 543.5537475],
[.063215003, .072788125, .083706343, .096262295, .110701639, .127306885, .146402917, .168363355, .193617858, .222660537, .256059618, .29446856, .338638844, .389434671, .447849872, .515027352, .592281455, .681123673, .783292224, .900786058, 1.035903967, 1.191289562, 1.369982996, 1.575480445, 1.811802512, 2.083572889, 2.396108822, 2.755525146, 3.168853918, 3.644182005, 4.190809306, 4.819430702, 5.542345307, 6.373697103, 7.329751669, 8.429214419, 9.693596582, 11.14763607, 12.81978148, 14.7427487, 16.95416101, 19.49728516, 22.42187793, 25.78515962, 29.65293356, 34.1008736, 39.21600464, 45.09840534, 51.86316614, 59.64264106, 68.58903721, 78.8773928, 90.70900172, 104.315352, 119.9626548, 137.957053, 158.6506109, 182.4482026, 209.815433, 241.2877479, 277.4809101, 319.1030466, 366.9685036, 422.0137791, 485.315846],
[.056441967, .064989397, .074737806, .085948477, .098840749, .113666861, .130716891, .150324424, .172873088, .198804051, .228624659, .262918357, .302356111, .347709528, .399865957, .45984585, .528822728, .608146137, .699368057, .804273266, .924914256, 1.063651394, 1.223199104, 1.406678969, 1.617680814, 1.860332937, 2.139382877, 2.460290309, 2.829333855, 3.253733933, 3.741794023, 4.303063127, 4.948522596, 5.690800985, 6.544421133, 7.526084303, 8.654996948, 9.953246491, 11.44623346, 13.16316848, 15.13764376, 17.40829032, 20.01953387, 23.02246395, 26.47583354, 30.44720857, 35.01428986, 40.26643334, 46.30639834, 53.25235809, 61.2402118, 70.42624357, 80.9901801, 93.13870712, 107.1095132, 123.1759402, 141.6523312, 162.9001809, 187.335208, 215.4354892, 247.7508126, 284.9134345, 327.6504496, 376.7980171, 433.3177196],
[.050394613, .058026247, .066730184, .076739712, .088250669, .101488269, .116711509, .134218236, .154350971, .177503617, .204129159, .234748533, .269960813, .310454935, .357023176, .410576652, .47216315, .542987622, .624435766, .71810113, .8258163, .949688745, 1.092142057, 1.255963365, 1.44435787, 1.661011551, 1.910163283, 2.196687776, 2.526190942, 2.905119583, 3.340887521, 3.842020649, 4.418323746, 5.081072308, 5.843233154, 6.719718128, 7.727675847, 8.886827224, 10.21985131, 11.752829, 13.51575335, 15.54311636, 17.87458381, 20.55577138, 23.63913709, 27.18500765, 31.2627588, 35.95217262, 41.34499851, 47.54674829, 54.67876053, 62.88057461, 72.31266081, 83.15955993, 95.63349392, 109.978518, 126.4752957, 145.4465901, 167.2635786, 192.3531154, 221.2060827, 254.3869951, 292.5450443, 336.426801, 386.8908211],
[.04499519, .051809149, .059580522, .0685176, .07879524, .090614526, .104206705, .119837711, .137813367, .158485372, .182258178, .209596905, .24103644, .277191907, .318770693, .366586296, .421574241, .484810377, .557531934, .641161724, .737335982, .847936379, .975126836, 1.121395862, 1.289605241, 1.483046027, 1.705502931, 1.961328371, 2.255527627, 2.593856771, 2.982935286, 3.430375579, 3.944931916, 4.536671704, 5.217172459, 5.999748328, 6.899710577, 7.934667164, 9.124867239, 10.49359732, 12.06763692, 13.87778246, 15.95944983, 18.35336731, 21.1063724, 24.27232826, 27.9131775, 32.10015413, 36.91517724, 42.45245383, 48.82032191, 56.14337019, 64.56487572, 74.24960708, 85.38704814, 98.19510536, 112.9243712, 129.8630268, 149.3424809, 171.743853, 197.5054309, 227.1312456, 261.2009324, 300.3810723, 345.4382331],
[.040174277, .046258169, .053196894, .061176429, .070352893, .080905827, .093041701, .106997956, .123047649, .141504797, .162730516, .187140094, .215211108, .247492774, .28461669, .327309193, .376405572, .432866408, .497796369, .572465825, .658335698, .757086053, .870648961, 1.001246305, 1.151433251, 1.324148239, 1.522770474, 1.751186046, 2.013863952, 2.315943545, 2.663335077, 3.062835339, 3.52226064, 4.050599735, 4.658189696, 5.35691815, 6.160455873, 7.084524254, 8.147202892, 9.369283325, 10.77467582, 12.3908772, 14.24950878, 16.38693509, 18.84497536, 21.67172166, 24.92247991, 28.6608519, 32.95997968, 37.90397664, 43.58957313, 50.1280091, 57.64721046, 66.29429203, 76.23843584, 87.67420122, 100.8253314, 115.9491311, 133.3415008, 153.3427259, 176.3441348, 202.795755, 233.2151182, 268.197386, 308.4269939],
[.03586989, .041301937, .047497227, .054621811, .062815083, .072237345, .083072947, .095533889, .109863973, .126343568, .145295104, .167089369, .192152775, .220975691, .254122044, .292240351, .336076404, .386487864, .444461044, .511130201, .587799731, .67596969, .777365144, .893969915, 1.028065403, 1.182275213, 1.359616495, 1.563558969, 1.798092815, 2.067806737, 2.377977747, 2.73467441, 3.144875571, 3.616606907, 4.159097943, 4.782962634, 5.500407029, 6.325468084, 7.274288296, 8.365431541, 9.620246272, 11.06328321, 12.72277569, 14.63119205, 16.82587086, 19.34975148, 22.25221421, 25.59004634, 29.42855329, 33.84283628, 38.91926172, 44.75715098, 51.47072363, 59.19133217, 68.070032, 78.2805368, 90.02261732, 103.5260099, 119.0549114, 136.9131481, 157.4501203, 181.0676384, 208.2277841, 239.4619518, 275.3812445],
[.032026688, .036876729, .042408239, .048769474, .056084895, .06449763, .074172274, .085298115, .098092833, .112806758, .129727771, .149186937, .171564977, .197299724, .226894683, .260928885, .300068218, .34507845, .396840218, .456366251, .524821188, .603544366, .694076021, .798187424, .917915538, 1.055602869, 1.213943299, 1.396034794, 1.605440013, 1.846256015, 2.123194417, 2.44167358, 2.807924617, 3.22911331, 3.713480306, 4.270502352, 4.911077705, 5.64773936, 6.494900264, 7.469135304, 8.5895056, 9.87793144, 11.35962116, 13.06356433, 15.02309898, 17.27656382, 19.8680484, 22.84825566, 26.27549401, 30.21681811, 34.74934082, 39.96174195, 45.95600324, 52.84940373, 60.77681429, 69.89333643, 80.37733689, 92.43393743, 106.299028, 122.2438822, 140.5804646, 161.6675343, 185.9176644, 213.8053141, 245.8761112],
[.028595257, .032925651, .037864499, .043544173, .050075799, .057587169, .066225245, .076159032, .087582886, .100720319, .115828367, .133202622, .153183015, .176160468, .202584538, .232972219, .267918051, .308105759, .354321623, .407469867, .468590347, .538878898, .619710733, .712667343, .819567445, .942502561, 1.083877946, 1.246459638, 1.433428583, 1.648442871, 1.895709301, 2.180065696, 2.507075551, 2.883136884, 3.315607416, 3.812948528, 4.384890808, 5.042624429, 5.799018093, 6.668870807, 7.669201428, 8.819581642, 10.14251889, 11.66389672, 13.41348123, 15.42550342, 17.73932893, 20.40022827, 23.46026251, 26.97930188, 31.02619716, 35.68012674, 41.03214575, 47.18696761, 54.26501275, 62.40476467, 71.76547937, 82.53030127, 94.90984646, 109.1463234, 125.5182719, 144.3460127, 165.9979147, 190.8976019, 219.5322421],
[.025531479, .029397903, .033807588, .038878726, .044710535, .051417116, .059129683, .067999135, .078199006, .089928856, .103418185, .118930913, .13677055, .157286132, .180879052, .20801091, .239212546, .275094428, .316358592, .363812381, .418384238, .481141874, .553313155, .636310128, .731756647, .841520144, .967748166, 1.112910391, 1.279846949, 1.471823992, 1.69259759, 1.946487229, 2.238460313, 2.57422936, 2.960363764, 3.404418329, 3.915081078, 4.50234324, 5.177694726, 5.954348935, 6.847501275, 7.874626467, 9.055820436, 10.4141935, 11.97632253, 13.77277091, 15.83868654, 18.21448952, 20.94666295, 24.0886624, 27.70196175, 31.85725602, 36.63584442, 42.13122108, 48.45090425, 55.71853988, 64.07632086, 73.68776899, 84.74093434, 97.45207449, 112.0698857, 128.8803685, 148.2124238, 170.4442874, 196.0109305],
[.022795964, .026248127, .030185347, .034713148, .039920121, .045908139, .05279436, .060713514, .069820541, .080293622, .092337665, .106188315, .122116562, .140434046, .161499153, .185724026, .21358263, .245620025, .282463029, .324832483, .373557355, .429590959, .494029602, .568134043, .653354149, .751357272, .864060862, .993669992, 1.14272049, 1.314128564, 1.511247849, 1.737935026, 1.99862528, 2.298419072, 2.643181932, 3.039659222, 3.495608106, 4.019949321, 4.62294172, 5.316382978, 6.113840424, 7.030916488, 8.085553961, 9.298387055, 10.69314511, 12.29711688, 14.14168441, 16.26293707, 18.70237764, 21.50773428, 24.73389442, 28.44397859, 32.71057537, 37.61716168, 43.25973593, 49.74869632, 57.21100077, 65.79265089, 75.66154852, 87.0107808, 100.0623979, 115.0717576, 132.3325212, 152.1823994, 175.0097594],
[.020353539, .023435828, .026951202, .030993883, .035642965, .04098941, .047137821, .054208494, .062339768, .071690734, .082444344, .094810995, .109032645, .125387541, .144195673, .165825024, .190698777, .219303594, .252199133, .290029003, .333533353, .383563356, .441097859, .507262538, .583351919, .670854707, .771482913, .88720535, 1.020286152, 1.173329075, 1.349328436, 1.551727702, 1.784486857, 2.052159885, 2.359983868, 2.713981448, 3.121078666, 3.589240466, 4.127626535, 4.746770516, 5.458786093, 6.277604007, 7.219244608, 8.302131299, 9.547450994, 10.97956864, 12.62650394, 14.52047953, 16.69855146, 19.20333418, 22.08383431, 25.39640945, 29.20587087, 33.5867515, 38.62476423, 44.41847886, 51.08125069, 58.74343829, 67.55495404, 77.68819714, 89.34142671, 102.7426407, 118.1540368, 135.8771424, 156.2587137],
[.018172803, .020924846, .024063573, .027673109, .031824076, .036597687, .04208734, .048400441, .055660508, .064009584, .073611021, .084652674, .097350576, .111953162, .128746136, .148058057, .170266765, .19580678, .225177797, .258954467, .297797637, .342467282, .393837374, .452912981, .520849928, .598977417, .688824029, .792147634, .910969779, 1.047615246, 1.204757532, 1.385471162, 1.593291837, 1.832285612, 2.107128454, 2.423197722, 2.78667738, 3.204678987, 3.685380835, 4.238187961, 4.873916155, 5.605003578, 6.445754114, 7.412617232, 8.524509816, 9.803186289, 11.27366423, 12.96471387, 14.90942095, 17.14583409, 19.7177092, 22.67536558, 26.07667042, 29.98817098, 34.48639663, 39.65935613, 45.60825954, 52.44949848, 60.31692325, 69.36446173, 79.76913099, 91.73450064, 105.4946757, 121.3188771, 139.5167087],
[.016225717, .018682899, .021485333, .024708133, .028414353, .032676506, .037577982, .04321468, .049696882, .057151414, .065724126, .075582745, .086920157, .09995818, .114951907, .132194694, .152023898, .174827482, .201051604, .231209345, .265890747, .305774359, .351640513, .40438659, .465044578, .534801265, .615021455, .707274673, .813365874, .935370755, 1.075676368, 1.237027823, 1.422581997, 1.635969296, 1.881364691, 2.163569395, 2.488104804, 2.861320524, 3.290518603, 3.784096393, 4.351710852, 5.00446748, 5.755137602, 6.618408242, 7.611169479, 8.752844901, 10.06577164, 11.57563738, 13.31198299, 15.30878044, 17.6050975, 20.24586213, 23.28274145, 26.77515266, 30.79142556, 35.4101394, 40.72166031, 46.82990935, 53.85439576, 61.93255512, 71.22243839, 81.90580415, 94.19167477, 108.320426, 124.5684899],
[.014487247, .016681159, .019183333, .022060833, .025369958, .029175452, .03355177, .038584536, .044372216, .051028048, .058682255, .067484594, .077607283, .089248375, .102635632, .118030976, .135735623, .156095966, .179510361, .206436915, .237402453, .273012821, .313964744, .361059455, .415218373, .477501129, .549126299, .631495244, .72621953, .83515246, .960425329, 1.104489128, 1.270162497, 1.460686872, 1.679789903, 1.931758388, 2.221522146, 2.554750468, 2.937963038, 3.378657494, 3.885456118, 4.468274536, 5.138515716, 5.909293074, 6.795687035, 7.81504009, 8.987296103, 10.33539052, 11.8856991, 13.66855396, 15.71883706, 18.07666261, 20.78816201, 23.90638631, 27.49234425, 31.61619589, 36.35862527, 41.81241907, 48.08428193, 55.29692421, 63.59146285, 73.13018227, 84.09970961, 96.71466606, 111.221866],
[.012935042, .014893892, .017127976, .019697173, .022651749, .026049511, .029956938, .034450478, .03961805, .045560757, .052394871, .060254102, .069292217, .079686049, .091638957, .1053848, .12119252, .139371398, .160277108, .184318674, .211966476, .243761447, .280325664, .322374514, .370730691, .426340294, .490291338, .563835039, .648410295, .745671839, .857522615, .986151007, 1.134073658, 1.304184707, 1.499812413, 1.724784275, 1.983501916, 2.281027204, 2.623181284, 3.016658477, 3.469157248, 3.989530836, 4.587960461, 5.27615453, 6.06757771, 6.977714366, 8.024371521, 9.228027249, 10.61223134, 12.20406604, 14.03467594, 16.13987733, 18.56085893, 21.34498777, 24.54673594, 28.22874633, 32.46305828, 37.33251702, 42.93239458, 49.37225376, 56.77809183, 65.2948056, 75.08902644, 86.35238041, 99.30523747],
[.011549145, .013298118, .015292836, .017586761, .020224776, .023258492, .026747266, .030759355, .035373259, .040679248, .046781135, .053798305, .061868051, .071148258, .081820497, .094093572, .108207607, .124438749, .143104561, .164570245, .189255782, .217644149, .250290771, .287834387, .331009545, .380660977, .437760123, .503424142, .578937763, .665778428, .765645192, .880491971, 1.012565766, 1.164450631, 1.339118226, 1.53998596, 1.770983854, 2.036631432, 2.342126147, 2.693445069, 3.097461829, 3.562081103, 4.096393269, 4.710852259, 5.417480098, 6.230102112, 7.164617429, 8.239310044, 9.47520655, 10.89648753, 12.53096066, 14.41060476, 16.57219548, 19.0580248, 21.91672852, 25.2042378, 28.98487346, 33.33260448, 38.33249516, 44.08236943, 50.69472485, 58.29893357, 67.04377361, 77.10033965, 88.6653906],
[.010311736, .01187332, .013654318, .015702465, .018057835, .020766511, .023881487, .02746371, .031583267, .036320757, .04176887, .048034201, .055239331, .063525231, .073054015, .084012118, .096613935, .111106026, .127771929, .146937719, .168978377, .194325133, .223473903, .256994988, .295544237, .339875872, .390857253, .449485841, .516908717, .594445025, .683611778, .786153545, .904076577, 1.039688064, 1.195641273, 1.374987464, 1.581235584, 1.818420921, 2.091184059, 2.404861668, 2.765590919, 3.180429556, 3.65749399, 4.206118088, 4.837035802, 5.562591172, 6.396979848, 7.356526825, 8.460005849, 9.729006726, 11.18835773, 12.86661139, 14.7966031, 17.01609357, 19.56850761, 22.50378375, 25.87935131, 29.761254, 34.2254421, 39.35925842, 45.26314718, 52.05261926, 59.86051215, 68.83958897, 79.16552732],
[.009206907, .010601178, .012191355, .014020058, .016123067, .018541527, .021322756, .02452117, .028199345, .032429247, .037293634, .042887679, .049320831, .056718956, .065226799, .075010819, .086262442, .099201809, .11408208, .131194392, .150873551, .173504583, .199530271, .229459811, .263878783, .3034606, .34897969, .401326644, .46152564, .530754486, .610367659, .701922808, .807211229, .928292914, 1.067536851, 1.227667379, 1.411817485, 1.623590108, 1.867128625, 2.147197918, 2.469277606, 2.839669247, 3.265619634, 3.755462579, 4.318781966, 4.966599261, 5.71158915, 6.568327522, 7.55357665, 8.686613148, 9.98960512, 11.48804589, 13.21125277, 15.19294069, 17.47188179, 20.09266406, 23.10656367, 26.57254822, 30.55843045, 35.14219502, 40.41352427, 46.47555291, 53.44688585, 61.46391873, 70.68350653],
[.008220453, .009465338, .010885139, .012517909, .014395596, .016554935, .019038175, .021893902, .025177987, .028954685, .033297888, .038292571, .044036457, .050641925, .058238214, .066973946, .077020038, .088573043, .101859, .11713785, .134708527, .154914806, .178152027, .204874831, .235606056, .270946964, .311589009, .358327361, .412076465, .473887934, .544971124, .626716793, .720724312, .828832959, .953157903, 1.096131588, 1.260551326, 1.449634025, 1.667079129, 1.917140998, 2.204712148, 2.53541897, 2.915731816, 3.353091588, 3.856055327, 4.434463626, 5.099633169, 5.864578145, 6.744264866, 7.755904596, 8.919290286, 10.25718383, 11.7957614, 13.56512561, 15.59989446, 17.93987862, 20.63086042, 23.72548948, 27.2843129, 31.37695984, 36.08350381, 41.49602939, 47.72043379, 54.87849886, 63.11027369],
[.00733969, .008451195, .009718874, .011176705, .01285321, .014781192, .016998371, .019548126, .022480345, .025852397, .029730257, .034189795, .039318265, .045216004, .051998405, .059798166, .068767891, .079083074, .090945536, .104587366, .120275471, .138316791, .15906431, .182923957, .21036255, .241916933, .278204472, .319935143, .367925415, .423114227, .486581361, .559568565, .64350385, .740029428, .851033842, .978688918, 1.125492256, 1.294316094, 1.488463508, 1.711733034, 1.968492989, 2.263766938, 2.603331978, 2.993831775, 3.442906542, 3.959342523, 4.553243901, 5.236230486, 6.021665059, 6.924914818, 7.963652041, 9.158199847, 10.53192982, 12.1117193, 13.92847719, 16.01774877, 18.42041109, 21.18347275, 24.36099366, 28.01514271, 32.21741412, 37.05002624, 42.60753017, 48.9986597, 56.34845865],
[.006553295, .007545709, .008677566, .009979201, .011476081, .013197493, .015177117, .017453684, .020071737, .023082498, .026544872, .030526603, .035105594, .040371433, .046427147, .05339122, .061399902, .070609888, .081201371, .093381577, .107388813, .123497135, .142021705, .163324961, .187823705, .215997261, .24839685, .285656378, .328504835, .37778056, .434447644, .49961479, .574557009, .66074056, .759851644, .873829391, 1.0049038, 1.15563937, 1.328985275, 1.528333066, 1.757583026, 2.02122048, 2.324403552, 2.673064085, 3.074023698, 3.535127252, 4.06539634, 4.675205791, 5.37648666, 6.182959659, 7.110403608, 8.176964149, 9.403508772, 10.81403509, 12.43614035, 14.3015614, 16.44679561, 18.91381496, 21.7508872, 25.01352028, 28.76554832, 33.08038057, 38.04243765, 43.7488033, 50.3111238],
[.005851156, .006737241, .007747827, .008910001, .010246501, .011783476, .013550997, .015583647, .017921194, .020609373, .023700779, .027255896, .03134428, .036045922, .04145281, .047670732, .054821341, .063044543, .072501224, .083376408, .095882869, .110265299, .126805094, .145825858, .167699737, .192854698, .221782902, .255050337, .293307888, .337304071, .387899682, .446084634, .512997329, .589946929, .678438968, .780204813, .897235535, 1.031820866, 1.186593996, 1.364583095, 1.569270559, 1.804661143, 2.075360314, 2.386664362, 2.744664016, 3.156363618, 3.629818161, 4.174290885, 4.800434518, 5.520499696, 6.34857465, 7.300860848, 8.395989975, 9.655388471, 11.10369674, 12.76925125, 14.68463894, 16.88733478, 19.420435, 22.33350025, 25.68352529, 29.53605408, 33.96646219, 39.06143152, 44.92064625],
[.005224247, .006015393, .006917702, .007955358, .009148661, .010520961, .012099105, .01391397, .016001066, .018401226, .02116141, .024335621, .027985964, .032183859, .037011438, .042563153, .048947626, .05628977, .064733236, .074443221, .085609704, .09845116, .113218834, .130201659, .149731908, .172191694, .198020448, .227723516, .261882043, .301164349, .346339002, .398289852, .45803333, .526738329, .605749079, .696611441, .801103157, .92126863, 1.059458925, 1.218377763, 1.401134428, 1.611304592, 1.853000281, 2.130950323, 2.450592871, 2.818181802, 3.240909072, 3.727045433, 4.286102248, 4.929017585, 5.668370223, 6.518625757, 7.49641962, 8.620882563, 9.914014948, 11.40111719, 13.11128477, 15.07797748, 17.33967411, 19.94062522, 22.93171901, 26.37147686, 30.32719838, 34.87627814, 40.10771986],
[.004664506, .005370887, .00617652, .007102998, .008168448, .009393715, .010802772, .012423188, .014286666, .016429666, .018894116, .021728233, .024987468, .028735588, .033045926, .038002815, .043703238, .050258723, .057797532, .066467162, .076437236, .087902821, .101088245, .116251481, .133689204, .153742584, .176803972, .203324567, .233823253, .268896741, .309231252, .355615939, .40895833, .47030208, .540847392, .6219745, .715270676, .822561277, .945945468, 1.087837289, 1.251012882, 1.438664814, 1.654464536, 1.902634217, 2.188029349, 2.516233752, 2.893668815, 3.327719137, 3.826877007, 4.400908558, 5.061044842, 5.820201569, 6.693231804, 7.697216574, 8.851799061, 10.17956892, 11.70650426, 13.4624799, 15.48185188, 17.80412966, 20.47474911, 23.54596148, 27.0778557, 31.13953406, 35.81046416],
[.004164737, .004795435, .00551475, .006341962, .007293257, .008387245, .009645332, .011092132, .012755952, .014669345, .016869746, .019400208, .022310239, .025656775, .029505292, .033931085, .039020748, .04487386, .051604939, .05934568, .068247532, .078484662, .090257361, .103795966, .11936536, .137270164, .157860689, .181539792, .208770761, .240086375, .276099332, .317514232, .365141366, .419912571, .482899457, .555334375, .638634532, .734429712, .844594168, .971283293, 1.116975787, 1.284522156, 1.477200479, 1.698780551, 1.953597633, 2.246637278, 2.58363287, 2.971177801, 3.416854471, 3.929382641, 4.518790038, 5.196608543, 5.976099825, 6.872514799, 7.903392018, 9.088900821, 10.45223594, 12.02007134, 13.82308204, 15.89654434, 18.28102599, 21.02317989, 24.17665688, 27.80315541, 31.97362872],
[.003718515, .004281638, .004923884, .005662466, .006511836, .007488612, .008611904, .009903689, .011389243, .013097629, .015062273, .017321614, .019919857, .022907835, .02634401, .030295612, .034839954, .040065947, .046075839, .052987214, .060935297, .070075591, .08058693, .092674969, .106576215, .122562647, .140947044, .1620891, .186402465, .214362835, .246517261, .28349485, .326019077, .374921939, .431160229, .495834264, .570209403, .655740814, .754101936, .867217226, .99729981, 1.146894782, 1.318928999, 1.516768349, 1.744283601, 2.005926141, 2.306815063, 2.652837322, 3.05076292, 3.508377358, 4.034633962, 4.639829057, 5.335803415, 6.136173927, 7.056600016, 8.115090019, 9.332353522, 10.73220655, 12.34203753, 14.19334316, 16.32234464, 18.77069633, 21.58630078, 24.8242459, 28.54788278], 
[.003320103, .003822891, .004396325, .005055774, .00581414, .006686261, .0076892, .00884258, .010168967, .011694312, .013448458, .015465727, .017785586, .020453424, .023521438, .027049653, .031107101, .035773167, .041139142, .047310013, .054406515, .062567492, .071952616, .082745508, .095157334, .109430935, .125845575, .144722411, .166430773, .191395389, .220104697, .253120401, .291088462, .334751731, .384964491, .442709164, .509115539, .58548287, .6733053, .774301095, .890446259, 1.024013198, 1.177615178, 1.354257454, 1.557396073, 1.791005483, 2.059656306, 2.368604752, 2.723895465, 3.132479784, 3.602351752, 4.142704515, 4.764110192, 5.478726721, 6.300535729, 7.245616088, 8.332458501, 9.582327277, 11.01967637, 12.67262782, 14.573522, 16.7595503, 19.27348284, 22.16450527, 25.48918106],
[.002964378, .003413296, .00392529, .004514084, .005191196, .005969876, .006865357, .00789516, .009079434, .01044135, .012007552, .013808685, .015879988, .018261986, .021001284, .024151476, .027774198, .031940327, .036731376, .042241083, .048577245, .055863832, .064243407, .073879918, .084961906, .097706192, .11236212, .129216438, .148598904, .17088874, .196522051, .226000358, .259900412, .298885474, .343718295, .395276039, .454567445, .522752562, .601165446, .691340263, .795041303, .914297498, 1.051442123, 1.209158441, 1.390532208, 1.599112039, 1.838978845, 2.114825671, 2.432049522, 2.79685695, 3.216385493, 3.698843317, 4.253669814, 4.891720286, 5.625478329, 6.469300079, 7.439695091, 8.555649354, 9.838996757, 11.31484627, 13.01207321, 14.96388419, 17.20846682, 19.78973685, 22.75819737],
[.002646766, .003047585, .003504723, .004030432, .004634997, .005330246, .006129783, .00704925, .008106638, .009322634, .010721029, .012329183, .01417856, .016305344, .018751146, .021563818, .024798391, .028518149, .032795872, .037715253, .043372541, .049878422, .057360185, .065964213, .075858844, .087237671, .100323322, .11537182, .132677593, .152579232, .175466117, .201786034, .232053939, .26686203, .306891335, .352925035, .40586379, .466743359, .536754863, .617268092, .709858306, .816337052, .93878761, 1.079605751, 1.241546614, 1.427778606, 1.641945397, 1.888237207, 2.171472787, 2.497193706, 2.871772761, 3.302538676, 3.797919477, 4.367607399, 5.022748508, 5.776160785, 6.642584902, 7.638972638, 8.784818533, 10.10254131, 11.61792251, 13.36061089, 15.36470252, 17.6694079, 20.31981908],
[.002363184, .002721058, .003129217, .0035986, .00413839, .004759148, .00547302, .006293974, .00723807, .00832378, .009572347, .011008199, .012659429, .014558343, .016742095, .019253409, .02214142, .025462633, .029282028, .033674333, .038725483, .044534305, .051214451, .058896618, .067731111, .077890778, .089574394, .103010554, .118462137, .136231457, .156666176, .180166102, .207191017, .23826967, .27401012, .315111639, .362378384, .416735142, .479245413, .551132225, .633802059, .728872368, .838203223, .963933706, 1.108523762, 1.274802327, 1.466022676, 1.685926077, 1.938814989, 2.229637237, 2.564082823, 2.948695246, 3.390999533, 3.899649463, 4.484596882, 5.157286415, 5.930879377, 6.820511284, 7.843587976, 9.020126173, 10.3731451, 11.92911686, 13.71848439, 15.77625705, 18.14269561],
[.002109986, .002429516, .002793944, .003213036, .003694991, .00424924, .004886625, .005619619, .006462562, .007431946, .008546738, .009828749, .011303062, .012998521, .014948299, .017190544, .019769125, .022734494, .026144668, .030066368, .034576324, .039762772, .045727188, .052586266, .060474206, .069545337, .079977138, .091973709, .105769765, .12163523, .139880514, .160862591, .18499198, .212740777, .244651893, .281349677, .323552129, .372084948, .42789769, .492082344, .565894696, .6507789, .748395735, .860655095, .989753359, 1.138216363, 1.308948818, 1.50529114, 1.731084811, 1.990747533, 2.289359663, 2.632763613, 3.027678155, 3.481829878, 4.004104359, 4.604720013, 5.295428015, 6.089742218, 7.00320355, 8.053684083, 9.261736695, 10.6509972, 12.24864678, 14.0859438, 16.19883537],
[.001883916, .002169211, .002494593, .002868782, .003299099, .003793964, .004363058, .005017517, .005770145, .006635666, .007631016, .008775669, .010092019, .011605822, .013346695, .0153487, .017651005, .020298655, .023343454, .026844972, .030871718, .035502475, .040827847, .046952024, .053994827, .062094051, .071408159, .082119383, .09443729, .108602884, .124893316, .143627313, .165171411, .189947122, .21843919, .251205069, .288885829, .332218704, .382051509, .439359236, .505263121, .581052589, .668210478, .768442049, .883708357, 1.01626461, 1.168704302, 1.344009947, 1.545611439, 1.777453155, 2.044071128, 2.350681797, 2.703284067, 3.108776677, 3.575093178, 4.111357155, 4.728060728, 5.437269837, 6.252860313, 7.19078936, 8.269407763, 9.509818928, 10.93629177, 12.57673553, 14.46324586],
[.001682068, .001936796, .002227315, .002561412, .002945624, .003387468, .003895588, .004479926, .005151915, .005924702, .006813408, .007835419, .009010731, .010362341, .011916692, .013704196, .015759826, .0181238, .020842369, .023968725, .027564034, .031698639, .036453434, .04192145, .048209667, .055441117, .063757285, .073320877, .084319009, .09696686, .111511889, .128238673, .147474474, .169595645, .195034991, .22429024, .257933776, .296623843, .341117419, .392285032, .451127787, .518796955, .596616498, .686108972, .789025318, .907379116, 1.043485984, 1.200008881, 1.380010213, 1.587011745, 1.825063507, 2.098823033, 2.413646488, 2.775693461, 3.19204748, 3.670854602, 4.221482793, 4.854705212, 5.582910993, 6.420347642, 7.383399789, 8.490909757, 9.764546221, 11.22922815, 12.91361238],
[.001501846, .001729282, .001988674, .002286975, .002630022, .003024525, .003478203, .003999934, .004599924, .005289913, .0060834, .00699591, .008045296, .00925209, .010639904, .012235889, .014071273, .016181964, .018609258, .021400647, .024610744, .028302356, .032547709, .037429866, .043044346, .049500997, .056926147, .065465069, .075284829, .086577554, .099564187, .114498815, .131673637, .151424683, .174138385, .200259143, .230298014, .264842717, .304569124, .350254493, .402792667, .463211567, .532693302, .612597297, .704486891, .810159925, .931683914, 1.071436501, 1.232151976, 1.416974772, 1.629520988, 1.873949137, 2.155041507, 2.478297733, 2.850042393, 3.277548752, 3.769181065, 4.334558225, 4.984741958, 5.732453252, 6.59232124, 7.581169426, 8.71834484, 10.02609657, 11.53001105],
[.001340934, .001544002, .001775602, .002041942, .002348234, .002700469, .003105539, .00357137, .004107075, .004723136, .005431607, .006246348, .0071833, .008260795, .009499914, .010924901, .012563637, .014448182, .016615409, .019107721, .021973879, .025269961, .029060455, .033419523, .038432451, .044197319, .050826917, .058450955, .067218598, .077301387, .088896595, .102231085, .117565748, .13520061, .155480701, .178802806, .205623227, .236466711, .271936718, .312727226, .359636309, .413581756, .475619019, .546961872, .629006153, .723357076, .831860637, .956639733, 1.100135693, 1.265156047, 1.454929454, 1.673168872, 1.924144203, 2.212765833, 2.544680708, 2.926382814, 3.365340237, 3.870141272, 4.450662463, 5.118261832, 5.886001107, 6.768901273, 7.784236464, 8.951871934, 10.29465272],
[.001197262, .001378573, .001585359, .001823163, .002096637, .002411133, .002772803, .003188723, .003667031, .004217086, .004849649, .005577096, .006413661, .00737571, .008482066, .009754376, .011217533, .012900163, .014835187, .017060465, .019619535, .022562465, .025946835, .02983886, .034314689, .039461892, .045381176, .052188352, .060016605, .069019096, .07937196, .091277754, .104969417, .12071483, .138822055, .159645363, .183592167, .211130992, .242800641, .279220737, .321103848, .369269425, .424659839, .488358814, .561612637, .645854532, .742732712, .854142619, .982264012, 1.129603613, 1.299044155, 1.493900779, 1.717985895, 1.97568378, 2.272036347, 2.612841799, 3.004768068, 3.455483279, 3.97380577, 4.569876636, 5.255358131, 6.043661851, 6.950211129, 7.992742798, 9.191654218], 
[.001068984, .001230869, .001415499, .001627824, .001871997, .002152797, .002475717, .002847074, .003274135, .003765255, .004330044, .00497955, .005726483, .006585455, .007573273, .008709264, .010015654, .011518002, .013245703, .015232558, .017517442, .020145058, .023166817, .026641839, .030638115, .035233832, .040518907, .046596743, .053586255, .061624193, .070867822, .081497995, .093722694, .107781098, .123948263, .142540502, .163921578, .188509814, .216786287, .24930423, .286699864, .329704844, .37916057, .436034656, .501439854, .576655832, .663154207, .762627338, .877021439, 1.008574655, 1.159860853, 1.333839981, 1.533915978, 1.764003375, 2.028603881, 2.332894463, 2.682828632, 3.085252927, 3.548040866, 4.080246996, 4.692284046, 5.396126653, 6.205545651, 7.136377498, 8.206834123], 
[9.5445E-4, .00109899, .001263838, .001453414, .001671426, .00192214, .002210461, .00254203, .002923335, .003361835, .00386611, .004446027, .005112931, .005879871, .006761851, .007776129, .008942548, .010283931, .01182652, .013600498, .015640573, .017986659, .020684658, .023787356, .02735546, .031458779, .036177596, .041604235, .04784487, .055021601, .063274841, .072766067, .083680977, .096233123, .110668092, .127268306, .146358552, .168312334, .193559184, .222593062, .255982021, .294379325, .338536223, .389316657, .447714155, .514871279, .592101971, .680917266, .783054856, .900513085, 1.035590047, 1.190928554, 1.369567837, 1.575003013, 1.811253465, 2.082941485, 2.395382708, 2.754690114, 3.167893631, 3.643077675, 4.189539327, 4.817970226, 5.54066576, 6.371765623, 7.327530467]], unitindex, [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, .25, .25, 0, 0, 0, 0, 0, 0, 0, .25, .25], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, .25, .25, 0, 0, 0, 0, 0, 0, 0, .25, .25], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, .25, .25, 0, 0, 0, 0, 0, 0, 0, .25, .25], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, .25, .25, 0, 0, 0, 0, 0, 0, 0, .25, .25], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, .25, .25, 0, 0, 0, 0, 0, 0, 0, .25, .25], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, .25, .25, 0, 0, 0, 0, 0, 0, 0, .25, .25], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, .25, .25, 0, 0, 0, 0, 0, 0, 0, .25, .25], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, .25, .25, 0, 0, 0, 0, 0, 0, 0, .25, .25], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, .25, .25, 0, 0, 0, 0, 0, 0, 0, .25, .25], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, .25, .25, 0, 0, 0, 0, 0, 0, 0, .25, .25], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, .25, .25, 0, 0, 0, 0, 0, 0, 0, .25, .25], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, .25, .25, 0, 0, 0, 0, 0, 0, 0, .25, .25], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, .25, .25, 0, 0, 0, 0, 0, 0, 0, .25, .25], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, .25, .25, 0, 0, 0, 0, 0, 0, 0, .25, .25], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, .25, .25, .25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, .25, .25, 0, 0, 0, 0, 0, 0, 0, .25, .25], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .5, .5, .5, .5, 0, .5, .5, .5, 0, .5, .5, .5, 0, 0, 0, 1, .5, .5, 1, 0, 0, 0, .5, .5, .5, 0, 0, 0, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, 1, .5, 1, 1, .5, .5, .5, 1, 1, .5, .5, .5, 1, .5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, .5, .5, .5, 1], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, .5, .5, .5, .5, 0, 0, 0, .5, .5, .5, 0, 0, 0, .5, .5, .5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, .5, .5, 0, 0, 0, 0, 0, 1, 1, .5, .5], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .5, .5, .5, .5, 0, .5, .5, .5, 0, .5, .5, .5, 0, 0, 0, .5, .5, .5, .5, 0, 0, 0, .5, .5, .5, 0, 0, 0, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, .5, .5, 0, 0, 0, 0, 0, .5, .5, .5, .5],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .5, .5, .5, .5, 0, .5, .5, .5, 0, .5, .5, .5, 0, 0, 0, .5, .5, .5, .5, 0, 0, 0, .5, .5, .5, 0, 0, 0, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, .5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, .5, .5, 0, 0, 0, 0, 0, .5, .5, .5, .5],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, .25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]
    }
    function Zb(c, h, b, f, d) {
        for (var F = h[2], O = h[3], a = h[4], r = h[5], da = h[6], u = h[7], w = h[8], A = c[0], z = c[3], n = c[1], v = c[4], k = c[2], m = c[5], D = c[6], l = c[7], p = c[8], q = c[9], H = q[0], aa = q[3], I = q[5], Qa = q[1], C = q[4], M = [], y = [], P = [], U = [], B = [], Db = [], La = [], E = [], J = [], fa = [], N = [], ca = [], qa = [], na = [], sa = [], Ea = [], Fa = [], Ga = [], ya = [], Ha = [], Aa = [], za = [], ua = [], R = 1, S = 1; 9 >= S; S++)
            for (var Q = 1; 4 >= Q; Q++)
                if (0 < k[Q - 1][S - 1]) {
                    M.push(Q);
                    y.push(S);
                    var la = k[Q - 1][S - 1]
                      , K = m[Q - 1][S - 1];
                    0 === K && (K = 1);
                    for (var G = [], ia = 0; ia < a.length; ia++)
                        a[ia][0] === la && G.push(ia);
                    P.push(K);
                    U.push(a[G][0]);
                    B.push(a[G][1]);
                    Db.push(a[G][2]);
                    La.push(a[G][3]);
                    E.push(a[G][4]);
                    J.push(a[G][5]);
                    fa.push(a[G][6]);
                    N.push(a[G][7]);
                    ca.push(Math.ceil(a[G][8] * da[Math.min(b[B[R - 1] - 4 - 1], 64)][Math.min(K, 64)]));
                    var oa = f[B[R - 1] - 4 - 1] * (100 - Math.max(Math.min(d, 90), 0)) / 100;
                    741 === la ? qa.push(a[G][22] * r[Math.min(K - 1, 69)][13] * oa / a[G][9] * 1E3) : qa.push(a[G][9] * r[Math.min(K - 1, 69)][13] * oa);
                    na.push(a[G][19] * r[Math.min(K - 1, 69)][10] * (742 === la && 2 === C ? Math.pow(F, O) : 641 === la && 2 === Qa ? Math.pow(F, O) : 1));
                    sa.push(a[G][20] * r[Math.min(K - 1, 69)][11] * oa);
                    Ea.push(a[G][21] * r[Math.min(K - 1, 69)][12] * oa);
                    Fa.push(a[G][22] * r[Math.min(K - 1, 69)][13] * oa);
                    Ga.push(a[G][23] * r[Math.min(K - 1, 69)][14] * oa);
                    ya.push(2199.9);
                    Ha.push(50 + 100 * (S - 1));
                    Aa.push(p[Q - 1][S - 1]);
                    za.push(1);
                    1 === za[R - 1] ? 541 === la && 2 === H ? ua.push(0) : 645 === la && 2 === aa ? ua.push(0) : 545 === la && 2 === I ? ua.push(0) : ua.push(1) : ua.push(0);
                    R += 1
                }
        var bb = R - 1
          , ma = []
          , ka = []
          , Ka = []
          , ta = []
          , Pa = []
          , Xa = []
          , kb = []
          , Wa = []
          , gb = []
          , hb = []
          , Eb = []
          , $a = []
          , ub = []
          , ib = []
          , Ra = []
          , Ya = []
          , jb = []
          , ea = []
          , ac = []
          , lb = []
          , Ia = []
          , bc = []
          , Fb = []
          , Ba = [];
        for (S = R = 1; 9 >= S; S++)
            for (Q = 1; 8 >= Q; Q++)
                if (0 < n[Q - 1][S - 1] && 800 > n[Q - 1][S - 1]) {
                    ma.push(Q);
                    ka.push(S);
                    la = n[Q - 1][S - 1];
                    K = v[Q - 1][S - 1];
                    0 === K && (K = 1);
                    G = [];
                    for (ia = 0; ia < a.length; ia++)
                        a[ia][0] === la && G.push(ia);
                    Ka.push(K);
                    ta.push(a[G][0]);
                    Pa.push(a[G][1]);
                    Xa.push(a[G][2]);
                    kb.push(a[G][3]);
                    Wa.push(a[G][4]);
                    gb.push(a[G][5]);
                    hb.push(a[G][6]);
                    Eb.push(a[G][7]);
                    oa = f[3];
                    $a.push(a[G][14] * r[Math.min(K - 1, 69)][3]);
                    ub.push(a[G][15] * r[Math.min(K - 1, 69)][6] * oa);
                    ib.push(a[G][16] * r[Math.min(K - 1, 69)][7] * oa);
                    Ra.push(a[G][17] * r[Math.min(K - 1, 69)][8] * oa);
                    Ya.push(0 * oa);
                    jb.push(a[G][11] * r[Math.min(K - 1, 69)][4]);
                    ea.push(a[G][13] * r[Math.min(K - 1, 69)][5]);
                    ac.push(a[G][12]);
                    lb.push(850 + 100 * (Q - 1));
                    Ia.push(50 + 100 * (S - 1));
                    bc.push(l[Q - 1][S - 1]);
                    Fb.push(1);
                    Ba.push(1);
                    R += 1
                }
        var cc = R - 1
          , Sa = []
          , dc = []
          , ec = []
          , Ma = []
          , Gb = []
          , va = []
          , e = []
          , Bb = []
          , Za = []
          , Y = []
          , pa = []
          , wa = [];
        for (S = R = 1; 9 >= S; S++)
            for (Q = 1; 8 >= Q; Q++)
                if (0 < A[Q - 1][S - 1]) {
                    Sa.push(Q);
                    dc.push(S);
                    la = A[Q - 1][S - 1];
                    K = z[Q - 1][S - 1];
                    0 === K && (K = 1);
                    G = [];
                    for (ia = 0; ia < a.length; ia++)
                        a[ia][0] === la && G.push(ia);
                    ec.push(K);
                    Ma.push(a[G][0]);
                    Gb.push(a[G][1]);
                    oa = 1;
                    20 > Ma[R - 1] - 100 ? va.push(a[G][10] * r[Math.min(K - 1, 69)][1] * oa) : 10 <= K ? va.push(a[G][10] * r[Math.min(K - 1, 69)][1] * oa / 10) : va.push(a[G][10] * r[9][1] * Math.pow(1.1, K - 10) * oa / 10);
                    Bb.push(a[G][12]);
                    101 === Ma[R - 1] || 102 === Ma[R - 1] || 105 === Ma[R - 1] ? e.push(a[G][11] * r[Math.min(K - 1, 69)][2]) : 3 === a[G][12] ? e.push(a[G][11] * r[Math.min(K - 1, 69)][17]) : e.push(a[G][11] * r[Math.min(K - 1, 69)][16]);
                    Za.push(50 + 100 * (Q - 1));
                    Y.push(50 + 100 * (S - 1));
                    pa.push(D[Q - 1][S - 1]);
                    wa.push(1);
                    R += 1
                }
        var Ca = R - 1
          , ha = []
          , ja = []
          , mb = []
          , X = []
          , cb = []
          , nb = []
          , fc = []
          , gc = []
          , hc = []
          , L = [];
        for (S = R = 1; 9 >= S; S++)
            for (Q = 1; 8 >= Q; Q++)
                if (800 < n[Q - 1][S - 1]) {
                    ha.push(Q);
                    ja.push(S);
                    la = n[Q - 1][S - 1];
                    G = [];
                    for (ia = 0; ia < a.length; ia++)
                        a[ia][0] === la && G.push(ia);
                    mb.push(a[G][0]);
                    X.push(a[G][1]);
                    cb.push(a[G][2]);
                    nb.push(a[G][5]);
                    fc.push(a[G][6]);
                    gc.push(850 + 100 * (Q - 1));
                    hc.push(50 + 100 * (S - 1));
                    L.push(1);
                    R += 1
                }
        var Hb = R - 1
          , Cb = Ma.concat(ta.concat(U.concat(mb)))
          , Ib = [];
        for (R = 0; R < Ma.length; R++)
            Ib.push(x(u, Ma[R]));
        var vb = [];
        for (R = 0; R < ta.length; R++)
            vb.push(x(u, ta[R]));
        var ob = [];
        for (R = 0; R < U.length; R++)
            ob.push(x(u, U[R]));
        var Jb = [];
        for (R = 0; R < mb.length; R++)
            Jb.push(x(u, mb[R]));
        for (var Na = Ib.concat(vb.concat(ob.concat(Jb))), ba = [], ra = 0; ra < Na.length; ra++) {
            for (var pb = [], Ta = 0; Ta < vb.length; Ta++)
                pb.push(w[Na[ra]][vb[Ta]]);
            ba.push(pb)
        }
        var xa = [];
        for (ra = 0; ra < Na.length; ra++) {
            pb = [];
            for (var wb = 0; wb < ob.length; wb++)
                pb.push(w[Na[ra]][ob[wb]]);
            xa.push(pb)
        }
        var ic = [Ca, cc, bb, Hb];
        offparm = [M, y, P, U, B, Db, La, E, J, fa, N, ca, qa, na, sa, Ea, Fa, Ga, ya, Ha, Aa, za, ua];
        defparm = [ma, ka, Ka, ta, Pa, Xa, kb, Wa, gb, hb, Eb, $a, ub, ib, Ra, Ya, jb, ea, ac, lb, Ia, bc, Fb, Ba];
        bldparm = [Sa, dc, ec, Ma, Gb, va, e, Bb, Za, Y, pa, wa];
        obstparm = [ha, ja, mb, X, cb, nb, fc, gc, hc, L];
        ndds = [Ib, vb, ob, Jb];
        return [ic, Cb, Na, offparm, defparm, bldparm, obstparm, ba, xa, ndds]
    }
    function Aa(c, h, b, f, d, k, O, a, r, Gc, u) {
        var F = O[0]
          , A = O[1]
          , z = O[2]
          , n = O[3]
          , da = O[5]
          , p = d[1]
          , m = d[2]
          , D = d[3]
          , l = d[4]
          , ab = d[5]
          , V = c[9]
          , H = V[6]
          , aa = V[7]
          , I = V[1]
          , Qa = V[4]
          , C = f[3]
          , M = f[4]
          , B = f[5]
          , P = f[6]
          , U = f[7]
          , y = f[8]
          , Db = f[9]
          , La = Db[0]
          , E = Db[1]
          , fa = C[2]
          , N = C[3]
          , ca = C[4]
          , na = C[5]
          , sa = C[6]
          , ta = C[7]
          , ya = C[8]
          , za = C[9]
          , Aa = C[10]
          , ma = C[11]
          , ka = C[12]
          , Ha = C[13]
          , Ka = C[14]
          , Pa = C[15]
          , Xa = C[16]
          , R = C[17]
          , S = C[18]
          , Q = C[19]
          , la = C[20]
          , K = C[21]
          , G = C[22]
          , ia = M[2]
          , oa = M[3]
          , bb = M[4]
          , Wa = M[5]
          , gb = M[6]
          , hb = M[7]
          , $a = M[8]
          , ib = M[9]
          , jb = M[10]
          , kb = M[11]
          , Xb = M[12]
          , Yb = M[13]
          , Zb = M[14]
          , Eb = M[16]
          , $b = M[17]
          , ub = M[18]
          , mc = M[19]
          , Ra = M[20]
          , Ya = M[21]
          , nc = M[23]
          , ea = B[3]
          , ac = B[4]
          , lb = B[6]
          , Ia = B[7]
          , bc = B[8]
          , Fb = B[9]
          , Ba = B[10]
          , cc = B[11]
          , Sa = J(B[5])
          , dc = P[3]
          , ec = P[7]
          , Ma = P[8]
          , Gb = P[9];
        Sa[l] = 1.25 * Sa[l] * Math.pow(Cb, 5);
        var va = x(ea, 102 + 20 * (b[0] - 1));
        Sa[va] = 1.25 * Sa[va] * Math.pow(Cb, 5);
        K = Ea(K.length, 1);
        for (var e = 0; e < K.length; e++)
            4 < r[e] && (K[e] = 0);
        Q = [];
        for (e = 0; e < a.length; e++)
            Q[e] = 50 + 100 * (a[e] - 1);
        var Bb = J(Q)
          , Za = J(S)
          , Y = J(la)
          , pa = J(Y)
          , wa = J(K)
          , Ca = J(G)
          , ha = J(ka)
          , ja = J(Ra)
          , mb = J(mc)
          , X = J(Ya)
          , cb = J(X)
          , nb = J(Gc)
          , fc = J(nc)
          , gc = J(Fb)
          , hc = J(bc)
          , L = J(Ba)
          , Hb = J(cc)
          , oc = Ea(cc.length, 1)
          , Ib = J(Ma)
          , vb = J(ec)
          , ob = J(Gb)
          , Jb = Ea(Gb.length, 1)
          , Na = 0
          , ba = ac.concat(bb.concat(ca.concat(dc)));
        Fb.concat(Ra.concat(Q.concat(Ma)));
        var ra = [];
        for (e = 0; e < N.length; e++)
            ra.push([-1]);
        for (var pb = Math.floor(10 / k), Ta = Ea(pb + 1, 10); 120 > Na && 1 === Math.max.apply(null, wa) && 0 < L[x(ea, 101 + 20 * (b[0] - 1))] && .05 < Math.max.apply(null, Y) && 1 < Math.max.apply(null, Ta); ) {
            var xa = gc.concat(ja.concat(Bb.concat(Ib)))
              , wb = hc.concat(mb.concat(Za.concat(vb)));
            Hb.concat(nb.concat(wa.concat(ob)));
            for (var ic = oc.concat(fc.concat(Ca.concat(Jb))), xb = [], g = 0; g < wa.length; g++)
                10 * (r[g] - 1) <= Na ? xb.push(wa[g]) : xb.push(0);
            for (var db = Hb.concat(nb.concat(xb.concat(ob))), Oa = [], Ja = 0; Ja < xa.length; Ja++) {
                for (var qb = [], jc = 0; jc < Bb.length; jc++)
                    qb.push(Math.pow(Math.pow(xa[Ja] - Bb[jc], 2) + Math.pow(wb[Ja] - Za[jc], 2), .5) / 100);
                Oa.push(qb)
            }
            var Ua = [];
            for (Ja = 0; Ja < xa.length; Ja++) {
                qb = [];
                for (var rb = 0; rb < ja.length; rb++)
                    qb.push(Math.pow(Math.pow(xa[Ja] - ja[rb], 2) + Math.pow(wb[Ja] - mb[rb], 2), .5) / 100);
                Ua.push(qb)
            }
            var pc = [];
            for (Ja = 0; Ja < xa.length; Ja++) {
                qb = [];
                for (rb = 0; rb < ja.length; rb++)
                    qb.push(Math.abs(xa[Ja] - ja[rb]) / 100);
                pc.push(qb)
            }
            for (var Kb = x(nb, 1), Z = g = 0, t = 0, eb = 0, yb = 0; yb < Kb.length; yb++) {
                g = Kb[yb];
                Z = jb[g];
                t = -1;
                if (0 < Wa[g]) {
                    var T = [];
                    for (e = 0; e < ba.length; e++)
                        Ua[e][g] < $a[g] && Ua[e][g] > ib[g] && 4 < ba[e] && 8 > ba[e] && 1 === db[e] && 1 === ic[e] && e !== La.length + g && T.push(e);
                    if (0 < T.length) {
                        var sb = x(q(ba, T), Wa[g])
                          , zb = x(q(ba, T), gb[g])
                          , Ab = x(q(ba, T), hb[g]);
                        0 < sb.length ? (t = Ga(Fa(qa(q(Ua, q(T, sb)), g))),
                        t = T[sb[t]]) : 0 < zb.length ? (t = Ga(Fa(qa(q(Ua, q(T, zb)), g))),
                        t = T[zb[t]]) : 0 < Ab.length ? (t = Ga(Fa(qa(q(Ua, q(T, Ab)), g))),
                        t = T[Ab[t]]) : (t = Ga(Fa(qa(q(Ua, T), g))),
                        t = T[t])
                    }
                    if (0 <= t) {
                        dd = ea.length + oa.length;
                        if (5 === ca[t - dd])
                            var W = cb[g] * k * Xb[g] / A;
                        else
                            6 === ca[t - dd] ? W = cb[g] * k * Yb[g] / A : 7 == ca[t - dd] && (W = cb[g] * k * Zb[g] / A);
                        W > Y[t - dd] * Ha[t - dd] && (W = Y[t - dd] * Ha[t - dd]);
                        Y[t - dd] -= W / Ha[t - dd];
                        ha[t - dd] -= W / Ha[t - dd] * ka[t - dd];
                        0 >= Y[t - dd] && (Y[t - dd] = 0,
                        wa[t - dd] = 0,
                        ha[t - dd] = 0)
                    }
                }
                if (0 < Z) {
                    var fb = [];
                    for (e = 0; e < ba.length; e++)
                        1 > Ua[e][g] && 1 === db[e] && 0 < U[e][g] && 1 > U[e][g] && e !== La.length + g && fb.push(e);
                    0 < fb.length && 0 < Z && (Z *= Math.min.apply(null, qa(q(U, fb), g)));
                    t = -1;
                    T = [];
                    for (e = 0; e < ba.length; e++)
                        ba[e] === Wa[g] && 4 < ba[e] && 8 > ba[e] && 1 === db[e] && 1 === ic[e] && e !== La.length + g && T.push(e);
                    0 < T.length && (t = Ga(Fa(qa(q(Ua, T), g))),
                    t = T[t]);
                    0 <= t ? Ua[t][g] < $a[g] ? eb = Z = 0 : (eb = xa[t] > ja[g] ? 1 : xa[t] < ja[g] ? -1 : 0,
                    Math.abs(xa[t] - ja[g]) < Math.abs(k * Z * eb) && (Z = Math.min(Math.abs(xa[t] - ja[g]) / Math.abs(k * eb), Z))) : (eb = Ra[g] > ja[g] ? 1 : Ra[g] < ja[g] ? -1 : 0,
                    Math.abs(Ra[g] - ja[g]) < Math.abs(k * Z * eb) && (Z = Math.min(Math.abs(Ra[g] - ja[g]) / Math.abs(k * eb), Z)));
                    fb = [];
                    for (e = 0; e < ba.length; e++)
                        1 > Ua[e][g] && 1 === db[e] && 0 === U[e][g] && e !== La.length + g && fb.push(e);
                    if (0 < fb.length && 0 < Z)
                        for (var tb = 0; tb < fb.length; tb++)
                            0 < (xa[fb[tb]] - ja[g]) * eb && (Z = 0),
                            3 == bb[g] && 6 == ba[fb[tb]] && (Z = 0);
                    0 == t && k * Z > Math.abs(ja[g] - Ra[g]) && (Z = Math.abs(ja[g] - Ra[g]) / k);
                    ja[g] += k * Z * eb
                }
            }
            var Vb = 0;
            xb = [];
            for (g = 0; g < wa.length; g++)
                10 * (r[g] - 1) <= Na ? xb.push(wa[g]) : xb.push(0);
            Kb = x(xb, 1);
            for (yb = 0; yb < Kb.length; yb++) {
                g = Kb[yb];
                Z = Aa[g];
                t = -1;
                T = [];
                for (e = 0; e < ba.length; e++)
                    Oa[e][g] < ya[g] && Oa[e][g] > za[g] && 5 > ba[e] && 1 === db[e] && e !== La.length + E.length + g && 0 === x(ra[g], e).length && T.push(e);
                if (0 < T.length) {
                    sb = x(q(ba, T), na[g]);
                    var rc = 0 < na[g] ? x(q(ba, T), 1) : [];
                    zb = x(q(ba, T), sa[g]);
                    Ab = x(q(ba, T), ta[g]);
                    if (0 < sb.length) {
                        Z = 0;
                        var Wb = qa(q(Oa, q(T, sb)), g)
                          , qc = q(xa, q(T, sb))
                          , Bc = [];
                        for (e = 0; e < Wb.length; e++)
                            Bc.push(100 * Wb[e] - qc[e]);
                        t = Ga(Fa(Bc));
                        t = T[sb[t]];
                        0 === Ca[g] && (Ca[g] = 1)
                    } else
                        0 < rc.length ? (Z = 0,
                        t = Ga(Fa(qa(q(Oa, q(T, rc)), g))),
                        t = T[rc[t]],
                        0 === Ca[g] && (Ca[g] = 1)) : 0 < zb.length && 1 === Ca[g] ? (t = Ga(Fa(qa(q(Oa, q(T, zb)), g))),
                        t = T[zb[t]]) : 0 < Ab.length && 1 === Ca[g] ? (t = Ga(Fa(qa(q(Oa, q(T, Ab)), g))),
                        t = T[Ab[t]]) : 1 === Ca[g] && (t = Ga(Fa(qa(q(Oa, T), g))),
                        t = T[t])
                }
                W = 0;
                if (0 <= t)
                    if (t < ea.length)
                        744 == N[g] ? (W = pa[g] * Math.min(.7 * ka[g], ha[g]),
                        ra[g][ra[g].length] = t) : 724 == N[g] ? (W = pa[g] * Math.min(.7 * ka[g], ha[g]),
                        ra[g][ra[g].length] = t) : (W = pa[g] * ka[g] / 10 * k,
                        0 >= ha[g] && (wa[g] = 0,
                        ha[g] = 0)),
                        L[t] > W / Sa[t] ? ha[g] -= W : (W = L[t] * Sa[t],
                        ha[g] -= L[t] * Sa[t]),
                        L[t] -= W / Sa[t],
                        0 >= ha[g] && (wa[g] = 0,
                        ha[g] = 0),
                        0 >= L[t] && (L[t] = 0,
                        Hb[t] = 0);
                    else {
                        dd = ea.length;
                        2 == bb[t - dd] ? 744 == N[g] ? (W = pa[g] * Math.min(.7 * ka[g], ha[g]),
                        ra[g].push(t)) : 724 == N[g] ? (W = pa[g] * Math.min(.7 * ka[g], ha[g]),
                        ra[g].push(t)) : W = pa[g] * k * Xa[g] / F : 3 == bb[t - dd] ? W = pa[g] * k * Ka[g] / F : 4 == bb[t - dd] && (W = pa[g] * k * Pa[g] / F);
                        X[t - dd] < W / kb[t - dd] && (W = X[t - dd] * kb[t - dd]);
                        X[t - dd] -= W / kb[t - dd];
                        743 == N[g] && 2 == aa && 2 == bb[t - dd] && (Y[g] += W / Ha[g],
                        1 < Y[g] && (Y[g] = 1));
                        644 == N[g] && 2 == H && 4 == bb[t - dd] && (Y[g] += W / Ha[g],
                        1 < Y[g] && (Y[g] = 1));
                        if (744 == N[g] || 724 == N[g])
                            ha[g] -= W,
                            0 >= ha[g] && (wa[g] = 0,
                            ha[g] = 0);
                        0 >= X[t - dd] && (X[t - dd] = 0,
                        nb[t - dd] = 0)
                    }
                if (0 < Z) {
                    var sc = [];
                    for (e = 0; e < ba.length; e++)
                        1 > Oa[e][g] && 1 === db[e] && .5 === y[e][g] && e !== La.length + E.length + g && sc.push(e);
                    var kc = [];
                    for (e = 0; e < ba.length; e++)
                        1 > Oa[e][g] && 1 === db[e] && 0 === y[e][g] && e !== La.length + E.length + g && kc.push(e);
                    var Da = [];
                    for (e = 0; e < ba.length; e++)
                        1 > Oa[e][g] && 1 === db[e] && .25 === y[e][g] && e !== La.length + E.length + g && Da.push(e);
                    var lc = [];
                    for (e = 0; e < ba.length; e++)
                        1 > Oa[e][g] && 1 === db[e] && .1 === y[e][g] && e !== La.length + E.length + g && lc.push(e);
                    if (0 < sc.length && 0 < Z)
                        Z *= Math.min.apply(null, qa(q(y, sc), g));
                    else if (0 < kc.length && 0 < Z)
                        for (tb = 0; tb < kc.length; tb++)
                            wb[kc[tb]] < Za[g] && (Z = 0,
                            0 === Ca[g] && (Ca[g] = 1));
                    0 < Da.length && 0 < Z && (W = pa[g] * k * R[g] / F,
                    Da = Da[Da.length - 1],
                    htp = kb[Da - ea.length],
                    Z = Math.min(100 / (kb[Da - ea.length] / (W / k)), Z),
                    X[Da - ea.length] < W / htp && (W = X[Da - ea.length] * htp),
                    X[Da - ea.length] -= W / htp,
                    0 >= X[Da - ea.length] && (X[Da - ea.length] = 0,
                    nb[Da - ea.length] = 0),
                    0 === Ca[g] && (Ca[g] = 1));
                    0 < lc.length && 0 < Z && (W = Ha[g] / 200 * cb[lc - ea.length] * da[Math.min(ia[lc - ea.length], 69)][10] / da[Math.min(fa[g], 69)][10] * Z * k * 1.15,
                    Y[g] < W / Ha[g] && (W = Y[g] * Ha[g]),
                    Y[g] -= W / Ha[g],
                    0 >= Y[g] && (Y[g] = 0,
                    wa[g] = 0));
                    Za[g] -= k * Z
                }
                50 > Za[g] && (Za[g] = 50,
                wa[g] = 0);
                Vb += Z / N.length
            }
            for (e = 0; e < cb.length; e++)
                cb[e] = X[e];
            for (e = 0; e < pa.length; e++)
                pa[e] = Y[e];
            for (e = 0; e < pa.length; e++)
                742 === N[e] && 2 === Qa ? pa[e] = Math.min(Y[e] * Math.pow(z, n), 1) : 641 === N[e] && 2 === I && (pa[e] = Math.min(Y[e] * Math.pow(z, n), 1));
            Na += k;
            22 < Na ? Ta.push(Vb) : Ta.push(10);
            Ta = Ta.slice(Ta.length - pb - 1, Ta.length)
        }
        if (0 === L[l]) {
            for (e = 0; e < L.length; e++)
                L[e] = 0;
            for (e = 0; e < X.length; e++)
                X[e] = 0
        }
        var Va = []
          , Lb = [];
        for (e = 0; e < X.length; e++)
            Lb.push($b[e] * ua(Ya[e] - X[e]));
        Va.push(Lb.reduce(function(a, b) {
            return a + b
        }, 0));
        var Mb = [];
        for (e = 0; e < X.length; e++)
            1 === ub[e] && Mb.push(Eb[e] * ua(Ya[e] - X[e]));
        var Nb = [];
        for (e = 0; e < L.length; e++)
            1 === Ia[e] && Nb.push(lb[e] * ua(Ba[e] - L[e]));
        var Ob = [];
        for (e = 0; e < L.length; e++)
            1.5 === Ia[e] && Ob.push(lb[e] * ua(Ba[e] - L[e]));
        Va.push(Mb.reduce(function(a, b) {
            return a + b
        }, 0) + Nb.reduce(function(a, b) {
            return a + b
        }, 0) + Ob.reduce(function(a, b) {
            return a + b
        }, 0));
        var Pb = [];
        for (e = 0; e < X.length; e++)
            2 === ub[e] && Pb.push(Eb[e] * ua(Ya[e] - X[e]));
        var Qb = [];
        for (e = 0; e < L.length; e++)
            2 === Ia[e] && Qb.push(lb[e] * ua(Ba[e] - L[e]));
        var Rb = [];
        for (e = 0; e < L.length; e++)
            1.5 === Ia[e] && Rb.push(lb[e] * ua(Ba[e] - L[e]));
        Va.push(Pb.reduce(function(a, b) {
            return a + b
        }, 0) + Qb.reduce(function(a, b) {
            return a + b
        }, 0) + Rb.reduce(function(a, b) {
            return a + b
        }, 0));
        var Sb = [];
        for (e = 0; e < L.length; e++)
            3 === Ia[e] && Sb.push(lb[e] * ua(Ba[e] - L[e]));
        Va.push(Sb.reduce(function(a, b) {
            return a + b
        }, 0));
        Va.push(X.reduce(function(a, b) {
            return a + b
        }, 0) / X.length);
        Va.push(L.reduce(function(a, b) {
            return a + b
        }, 0) / L.length);
        l = x(ea, 101 + 20 * (b[0] - 1));
        Va.push(L[l]);
        va = x(ea, 102 + 20 * (b[0] - 1));
        0 === va.length ? Va.push(1) : Va.push(L[va]);
        Va.push(Na);
        var Tb = [];
        Lb = [];
        for (e = 0; e < X.length; e++)
            Lb.push(ab[e] * (Ya[e] - X[e]));
        Tb.push(Lb.reduce(function(a, b) {
            return a + b
        }, 0));
        Mb = [];
        for (e = 0; e < X.length; e++)
            1 === ub[e] && Mb.push(m[e] * (Ya[e] - X[e]));
        Nb = [];
        for (e = 0; e < L.length; e++)
            1 === Ia[e] && Nb.push(p[e] * (Ba[e] - L[e]));
        Ob = [];
        for (e = 0; e < L.length; e++)
            1.5 === Ia[e] && Ob.push(p[e] * (Ba[e] - L[e]));
        Tb.push(Mb.reduce(function(a, b) {
            return a + b
        }, 0) + Nb.reduce(function(a, b) {
            return a + b
        }, 0) + Ob.reduce(function(a, b) {
            return a + b
        }, 0));
        Pb = [];
        for (e = 0; e < X.length; e++)
            2 === ub[e] && Pb.push(m[e] * (Ya[e] - X[e]));
        Qb = [];
        for (e = 0; e < L.length; e++)
            2 === Ia[e] && Qb.push(p[e] * (Ba[e] - L[e]));
        Rb = [];
        for (e = 0; e < L.length; e++)
            1.5 === Ia[e] && Rb.push(p[e] * (Ba[e] - L[e]));
        Tb.push(Pb.reduce(function(a, b) {
            return a + b
        }, 0) + Qb.reduce(function(a, b) {
            return a + b
        }, 0) + Rb.reduce(function(a, b) {
            return a + b
        }, 0));
        Sb = [];
        for (e = 0; e < L.length; e++)
            3 === Ia[e] && Sb.push(p[e] * (Ba[e] - L[e]));
        Tb.push(Sb.reduce(function(a, b) {
            return a + b
        }, 0));
        var wc = Tb.reduce(function(a, b) {
            return a + b
        }, 0) / D;
        l = x(ea, 101 + 20 * (b[0] - 1));
        var xc = 0 === L[l] ? L[l] - 2 : L[l];
        va = x(ea, 102 + 20 * (b[0] - 1));
        var yc = 0 === va.length ? 1 : 0 === L[va] ? L[va] - 2 : L[va]
          , Cc = []
          , Dc = []
          , Ec = []
          , zc = []
          , Ac = []
          , Hc = [];
        for (e = 0; e < Y.length; e++)
            5 === ca[e] ? (Cc.push(ma[e] * (la[e] - Y[e]) * K[e]),
            zc.push(ma[e] * K[e])) : 6 === ca[e] ? (Dc.push(ma[e] * (la[e] - Y[e]) * K[e]),
            Ac.push(ma[e] * K[e])) : 7 === ca[e] && (Ec.push(ma[e] * (la[e] - Y[e]) * K[e]),
            Hc.push(ma[e] * K[e]));
        var tc = Cc.reduce(function(a, b) {
            return a + b
        }, 0)
          , uc = Dc.reduce(function(a, b) {
            return a + b
        }, 0)
          , vc = Ec.reduce(function(a, b) {
            return a + b
        }, 0)
          , Ub = Math.pow(1 / 3 * Math.pow(tc / 18E3, 20) + 1 / 3 * Math.pow(uc / 18E3, 20) + 1 / 3 * Math.pow(vc / 18E3, 20), .05)
          , Fc = Math.max(tc, Math.max(uc, vc)) / u / 6 / 60;
        1 < Fc && (Ub *= Math.pow(Fc, 4));
        180 >= tc && (Ub -= .05);
        180 >= uc && (Ub -= .05);
        180 >= vc && (Ub -= .05);
        return [Va, wc, Ub, xc, yc]
    }
    function mc(c) {
        for (var h in c)
            if ("object" == typeof c[h] && c[h] && 0 in c[h] && 8 in c[h] && "object" == typeof c[h][0] && c[h][0] && c[h][0] && 0 in c[h][0] && 15 in c[h][0] && "object" == typeof c[h][0][0] && c[h][0][0] && "BuildingIndex"in c[h][0][0])
                return c[h];
        return null
    }
    function nc(c) {
        c = c.get_CityBuildingsData();
        for (var h in c)
            if (376877 <= PerforceChangelist) {
                if ("object" === typeof c[h] && c[h] && "d"in c[h] && "c"in c[h] && 0 < c[h].c)
                    return c[h].d
            } else if ("object" === typeof c[h] && c[h] && "l"in c[h])
                return c[h].l
    }
    function oc(c) {
        var h = [], b;
        for (b in c)
            if ("object" == typeof c[b] && c[b])
                for (var f in c[b])
                    if (376877 <= PerforceChangelist) {
                        if ("object" == typeof c[b][f] && c[b][f] && "d"in c[b][f]) {
                            var d = c[b][f].d;
                            if ("object" == typeof d && d)
                                for (var k in d)
                                    "object" == typeof d[k] && d[k] && "get_CurrentLevel"in d[k] && h.push(d)
                        }
                    } else if ("object" == typeof c[b][f] && c[b][f] && "l"in c[b][f] && (d = c[b][f].l,
                    "object" == typeof d && d))
                        for (k in d)
                            "object" == typeof d[k] && d[k] && "get_CurrentLevel"in d[k] && h.push(d);
        return h
    }
    function pc(c) {
        c = oc(c);
        for (var d = 0; d < c.length; ++d)
            for (var b in c[d])
                if (c[d][b].get_UnitGameData_Obj().n in wc)
                    return c[d];
        return []
    }
    function sa() {
        try {
            if (100 > ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity().GetOffenseConditionInPercent()) {
                var c = ClientLib.Data.MainData.GetInstance().get_Cities()
                  , d = c.get_CurrentOwnCity()
                  , b = c.get_CurrentCity().get_Id();
                d.get_Id();
                var f = d.get_CityArmyFormationsManager().GetFormationByTargetBaseId(b)
                  , k = f.get_ArmyUnits();
                if (null == k) {
                    console.log("tafs Error: You must move a unit befor saving!");
                    return
                }
                k = k.l;
                ya = [];
                Wa = [];
                for (var p in k)
                    1 == k[p].get_Enabled() ? (Wa.push(k[p].get_CoordX() + 1),
                    ya.push(k[p].get_CoordY() + 1)) : (Wa.push(k[p].get_CoordX() + 1),
                    ya.push(k[p].get_CoordY() + 1 + 4))
            }
            var O = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity();
            if (null !== O) {
                var a = pc(O)
                  , r = 0;
                for (p in a) {
                    var q = a[p];
                    30 == q.get_CurrentLevel() && 1 == q.get_IsDamaged() && (ClientLib.Net.CommunicationManager.GetInstance().SendCommand("UnitDismiss", {
                        cityid: O.get_Id(),
                        unitId: q.get_Id()
                    }, null, null, !0),
                    ClientLib.Net.CommunicationManager.GetInstance().SendCommand("StartUnitProduction", {
                        cityid: O.get_Id(),
                        unitId: q.get_MdbUnitId(),
                        coordX: q.get_CoordX(),
                        coordY: q.get_CoordY()
                    }, null, null, !0),
                    r += 1)
                }
                var u = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity().GetOffenseConditionInPercent();
                if (0 <= u && 0 < r)
                    window.setTimeout(sa, 3500);
                else if (100 == u && 0 == r) {
                    c = ClientLib.Data.MainData.GetInstance().get_Cities();
                    b = c.get_CurrentCity().get_Id();
                    ClientLib.Data.MainData.GetInstance().get_Cities().GetCity(b);
                    qx.core.Init.getApplication().getPlayArea().setView(3, 0, 0, 0);
                    ClientLib.Vis.VisMain.GetInstance().Update();
                    ClientLib.Vis.VisMain.GetInstance().ViewUpdate();
                    qx.core.Init.getApplication().getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, b, 0, 0);
                    var w = Math.min.apply(null, ya) - 1;
                    if (0 < w)
                        for (O = 0; O < ya.length; O++)
                            5 > ya[O] && (ya[O] -= w);
                    c = ClientLib.Data.MainData.GetInstance().get_Cities();
                    d = c.get_CurrentOwnCity();
                    b = c.get_CurrentCity().get_Id();
                    b = c.get_CurrentCity().get_Id();
                    d.get_Id();
                    f = d.get_CityArmyFormationsManager().GetFormationByTargetBaseId(b);
                    k = f.get_ArmyUnits();
                    if (null == k)
                        console.log("tafs Error: You must move a unit befor saving!");
                    else
                        for (p in k = k.l,
                        k)
                            5 > ya[p] ? (k[p].MoveBattleUnit(Wa[p] - 1, ya[p] - 1),
                            k[p].set_Enabled(1)) : k[p].set_Enabled(0)
                }
            }
        } catch (A) {
            console.log("Error in ReplaceUnits: ", A)
        }
    }
    function fa(c, d, b, f, k, p, O, a) {
        var h = Date.now()
          , F = c[5]
          , u = 1 / 2.4;
        p = 1 === b[0] ? p : .01;
        for (var w = Yb(), A = 0, z = 0, n = 0; n < F.length; n++)
            for (var v = 0; v < F[n].length; v++)
                0 < F[n][v] && (A += F[n][v],
                z += 1);
        A = Math.min(Math.floor(A / z) + 10, 64);
        (f[0] + f[1] + f[2]) / 3 + 16 < A && (f = [A, A, A]);
        console.log("RT levels: " + f[0] + "," + f[1] + "," + f[2]);
        F = !0 === ClientLib.Data.MainData.GetInstance().get_Server().get_CombatUseMoral() ? Math.min(Math.ceil(15 * (ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().get_LvlBase() - ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity().get_LvlOffense() - 4)), 82) : 0;
        f = Zb(c, w, f, d, F);
        var da = f[3];
        F = f[4];
        z = f[5];
        v = da[0];
        n = da[1];
        var m = da[3];
        A = da[4];
        da = da[5];
        var D = F[1]
          , l = F[16]
          , B = F[17]
          , V = F[18];
        F = F[22];
        var H = z[1]
          , aa = z[3]
          , I = z[6]
          , y = z[7];
        z = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().get_LvlBase() - ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity().get_LvlOffense();
        z = 0 < z ? Math.pow(1.2, z) : 1;
        var C = J(n)
          , M = J(v);
        n = [];
        n.push(B.reduce(function(a, b) {
            return a + b
        }, 0));
        n.push(q(l, x(V, 1)).reduce(function(a, b) {
            return a + b
        }, 0) + q(I, x(y, 1)).reduce(function(a, b) {
            return a + b
        }, 0) + q(I, x(y, 1.5)).reduce(function(a, b) {
            return a + b
        }, 0));
        n.push(q(l, x(V, 2)).reduce(function(a, b) {
            return a + b
        }, 0) + q(I, x(y, 2)).reduce(function(a, b) {
            return a + b
        }, 0) + q(I, x(y, 1.5)).reduce(function(a, b) {
            return a + b
        }, 0));
        n.push(q(I, x(y, 3)).reduce(function(a, b) {
            return a + b
        }, 0));
        v = n.reduce(function(a, b) {
            return a + b
        }, 0);
        aa = x(aa, 101 + 20 * (b[0] - 1));
        var E = [];
        for (n = 0; n < H.length; n++)
            E.push(I[n] * Math.max(.25, k - Math.abs(H[n] - H[aa])));
        I = [];
        for (n = 0; n < D.length; n++)
            I.push(l[n] * Math.max(.25, k - Math.abs(D[n] - H[aa])));
        l = [];
        for (n = 0; n < D.length; n++)
            l.push(B[n] * Math.max(.25, k - Math.abs(D[n] - H[aa])));
        n = [];
        n.push(l.reduce(function(a, b) {
            return a + b
        }, 0));
        n.push(q(I, x(V, 1)).reduce(function(a, b) {
            return a + b
        }, 0) + q(E, x(y, 1)).reduce(function(a, b) {
            return a + b
        }, 0) + q(E, x(y, 1.5)).reduce(function(a, b) {
            return a + b
        }, 0));
        n.push(q(I, x(V, 2)).reduce(function(a, b) {
            return a + b
        }, 0) + q(E, x(y, 2)).reduce(function(a, b) {
            return a + b
        }, 0) + q(E, x(y, 1.5)).reduce(function(a, b) {
            return a + b
        }, 0));
        n.push(q(E, x(y, 3)).reduce(function(a, b) {
            return a + b
        }, 0));
        n = n.reduce(function(a, b) {
            return a + b
        }, 0);
        k = [v, E, I, n, aa, l];
        console.time("Time spent on optimization");
        D = V = 0;
        if (0 == a) {
            v = [];
            n = [];
            for (a = 0; a < M.length; a++)
                v.push(M[a] + 4),
                n.push(C[a]);
            F = Ea(F.length, 0);
            B = 1;
            l = [];
            for (a = 0; a < da.length; a++)
                2 !== da[a] && 724 !== m[a] && 744 !== m[a] || l.push(a);
            for (H = 0; H < l.length; H++) {
                m = l[H];
                var P = -1E5;
                a = [];
                a = Aa(c, d, b, f, k, u, w, n, v, F, O);
                reslt = a[0];
                a = z * a[1] - a[2] * p - 5 * a[3] - 2 * a[4];
                if (a > P) {
                    P = a;
                    V = n[m];
                    D = v[m];
                    C = V;
                    var U = D
                }
                for (C = 1; 9 >= C; C++)
                    for (U = 4; 1 <= U; U--) {
                        M = [];
                        for (a = 0; a < v.length; a++)
                            v[a] === U && n[a] === C && M.push(a);
                        0 == M.length && (v[m] = U,
                        n[m] = C,
                        a = Aa(c, d, b, f, k, u, w, n, v, F, O),
                        reslt = a[0],
                        a = z * a[1] - a[2] * p - 5 * a[3] - 2 * a[4],
                        a > P && (P = a,
                        V = C,
                        D = U,
                        B = reslt[6]))
                    }
                n[m] = V;
                v[m] = D
            }
            .5 > B ? console.log("Can possibly kill: cy " + 100 * B) : console.log("Unlikely to kill: cy " + 100 * B);
            F = Ea(F.length, 1);
            l = [];
            for (a = 0; a < da.length; a++)
                2 !== da[a] && 724 !== A[a] && 744 !== A[a] && l.push(a);
            for (H = 0; H < l.length; H++) {
                m = l[H];
                P = -1E5;
                a = [];
                a = Aa(c, d, b, f, k, u, w, n, v, F, O);
                reslt = a[0];
                a = z * a[1] - a[2] * p - 5 * a[3] - 2 * a[4];
                a > P && (P = a,
                V = n[m],
                D = v[m],
                C = V,
                U = D);
                for (C = 1; 9 >= C; C++)
                    for (U = 1; 4 >= U; U++) {
                        M = [];
                        for (a = 0; a < v.length; a++)
                            v[a] === U && n[a] === C && M.push(a);
                        0 == M.length && (v[m] = U,
                        n[m] = C,
                        a = Aa(c, d, b, f, k, u, w, n, v, F, O),
                        reslt = a[0],
                        a = z * a[1] - a[2] * p - 5 * a[3] - 2 * a[4],
                        a > P && (P = a,
                        V = C,
                        D = U))
                    }
                n[m] = V;
                v[m] = D
            }
            da = P
        } else
            P = xc(),
            n = P[0],
            v = P[1],
            P = da = -1E5,
            F = Ea(F.length, 1);
        B = J(n);
        l = J(v);
        H = Ea(A.length, 1);
        for (P = 0; P < H.length; P++)
            H[P] = 10 * (H.length + 2 - P);
        y = 8;
        8 > n.length && (y = n.length);
        I = 3;
        8 > n.length && (I = 6);
        aa = $b(H, y);
        A = Ea(A.length, 0);
        E = m = 0;
        P = Date.now();
        console.log(H);
        for (console.log(A); .0025 < Math.max.apply(null, H) && P - h < 1E3 * N; ) {
            m = aa[E];
            A[m]++;
            H[m] = Math.max(.003 * (I - A[m]), 0);
            P = da;
            a = [];
            for (C = 1; 9 >= C; C++)
                for (U = 1; 4 >= U; U++) {
                    for (a = 0; a < v.length; a++)
                        n[a] = B[a],
                        v[a] = l[a];
                    M = [];
                    for (a = 0; a < v.length; a++)
                        v[a] === U && n[a] === C && M.push(a);
                    0 < M.length && (v[M[0]] = v[m],
                    n[M[0]] = n[m]);
                    v[m] = U;
                    n[m] = C;
                    a = Aa(c, d, b, f, k, u, w, n, v, F, O);
                    reslt = a[0];
                    a = z * a[1] - a[2] * p - 5 * a[3] - 2 * a[4];
                    a > P && (P = a,
                    V = C,
                    D = U)
                }
            for (a = 0; a < v.length; a++)
                n[a] = B[a],
                v[a] = l[a];
            5 > v[m] && (v[m] = 5,
            a = Aa(c, d, b, f, k, u, w, n, v, F, O),
            reslt = a[0],
            a = z * a[1] - a[2] * p - 5 * a[3] - 2 * a[4],
            a > P && (P = a,
            V = C,
            D = U));
            U = D;
            C = V;
            var ab = P - da;
            if (0 < ab) {
                for (a = 0; a < v.length; a++)
                    n[a] = B[a],
                    v[a] = l[a];
                if (5 > U) {
                    M = [];
                    for (a = 0; a < v.length; a++)
                        v[a] === U && n[a] === C && M.push(a);
                    0 < M.length && (v[M[0]] = v[m],
                    n[M[0]] = n[m])
                }
                v[m] = U;
                n[m] = C;
                for (a = 0; a < v.length; a++)
                    B[a] = n[a],
                    l[a] = v[a];
                da = P;
                H[m] = ab + Math.max(.003 * (I - A[m]), 0)
            }
            console.log(" " + m.toFixed(0) + " " + H[m].toFixed(4) + " " + (100 * A.reduce(function(a, b) {
                return a + b
            }, 0) / I / A.length).toFixed(0) + "%");
            E += 1;
            E === y && (E = 0,
            aa = $b(H, y));
            P = Date.now()
        }
        P - h > 1E3 * N && console.log("Could not complete optimization");
        console.timeEnd("Time spent on optimization");
        for (a = 0; a < v.length; a++)
            n[a] = B[a],
            v[a] = l[a];
        a = Aa(c, d, b, f, k, 1 / 24, w, n, v, F, O);
        reslt = a[0];
        console.log("Research: " + reslt[0].toFixed(0) + "\nTiberium: " + reslt[1].toFixed(0) + "\nCrystal: " + reslt[2].toFixed(0) + "\nCredits: " + reslt[3].toFixed(0) + "\nDefenses: " + (100 * reslt[4]).toFixed(1) + "\nBuildings: " + (100 * reslt[5]).toFixed(0) + "\nCY: " + (100 * reslt[6]).toFixed(0) + "\nDF: " + (100 * reslt[7]).toFixed(0) + "\ntime: " + reslt[8].toFixed(1));
        return [n, v, reslt[6], reslt[8]]
    }
    function ma() {
        var c = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]
          , d = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]
          , b = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]
          , f = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]
          , k = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]
          , p = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]
          , O = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]
          , a = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]
          , r = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]
          , q = d.concat(k.concat(a))
          , u = c.concat(f.concat(O))
          , w = b.concat(p.concat(r))
          , A = ClientLib.Data.MainData.GetInstance().get_Cities();
        A.get_CurrentOwnCity();
        var z = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity()
          , n = ClientLib.Data.MainData.GetInstance().get_Alliance();
        A = A.get_CurrentCity().get_Id();
        A = ClientLib.Data.MainData.GetInstance().get_Cities().GetCity(A);
        console.log(A);
        var v = [0, 0];
        1 === A.get_CityFaction() ? v[0] = 2 : 2 === A.get_CityFaction() ? v[0] = 3 : v[0] = 1;
        1 === z.get_CityFaction() ? v[1] = 2 : 2 === A.get_CityFaction() ? v[1] = 3 : v[1] = 1;
        for (var B = [], m = 0; 20 > m; ++m) {
            for (var D = [], l = 0; 9 > l; ++l)
                D.push(null);
            B.push(D)
        }
        a: {
            l = oc(A);
            for (D = 0; D < l.length; ++D)
                for (y in l[D])
                    if (l[D][y].get_UnitGameData_Obj().n in yc) {
                        var y = l[D];
                        break a
                    }
            y = []
        }
        if (376877 <= PerforceChangelist)
            for (m in y)
                l = y[m],
                B[l.get_CoordX()][l.get_CoordY() + 8] = l;
        else
            for (m = 0; m < y.length; ++m)
                l = y[m],
                B[l.get_CoordX()][l.get_CoordY() + 8] = l;
        y = [];
        for (m = 0; 20 > m; ++m) {
            D = [];
            for (l = 0; 9 > l; ++l)
                D.push(null);
            y.push(D)
        }
        D = pc(z);
        if (376877 <= PerforceChangelist)
            for (m in D)
                l = D[m],
                y[l.get_CoordX()][l.get_CoordY() + 16] = l;
        else
            for (m = 0; m < D.length; ++m)
                l = D[m],
                y[l.get_CoordX()][l.get_CoordY() + 16] = l;
        D = mc(A);
        if (null == D)
            return null;
        var E = nc(A);
        for (m = 0; 20 > m; ++m)
            for (row = [],
            l = 0; 9 > l; ++l) {
                var H = 16 < m ? null : D[l][m]
                  , x = 0
                  , I = null;
                H && 0 <= H.BuildingIndex && (I = E[H.BuildingIndex],
                x = I.get_CurrentLevel(),
                70 < x && (x -= 25),
                health = I.get_HitpointsPercent());
                var N = B[l][m];
                N && (x = N.get_CurrentLevel(),
                70 < x && (x -= 25),
                health = N.get_HitpointsPercent());
                var C = y[l][m];
                C && (x = C.get_CurrentLevel(),
                70 < x && (x -= 25),
                health = 1);
                1 < x && (q[m][l] = x,
                w[m][l] = health);
                switch (16 < m ? 0 : A.GetResourceType(l, m)) {
                case 0:
                    I ? (H = I.get_MdbBuildingId(),
                    GAMEDATA.Tech[H].n in ka ? u[m][l] = ka[GAMEDATA.Tech[H].n] : console.log("Unhandled building: " + H, I)) : N ? N.get_UnitGameData_Obj().n in ka ? u[m][l] = ka[N.get_UnitGameData_Obj().n] : console.log("Unhandled unit: " + N.get_UnitGameData_Obj().n) : C && (C.get_UnitGameData_Obj().n in ka ? u[m][l] = ka[C.get_UnitGameData_Obj().n] : console.log("Unhandled unit: " + C.get_UnitGameData_Obj().n));
                    break;
                case 1:
                    0 > H.BuildingIndex || (u[m][l] = 1 === v[0] ? 108 : 2 === v[0] ? 128 : 148);
                    break;
                case 2:
                    0 > H.BuildingIndex || (u[m][l] = 1 === v[0] ? 107 : 2 === v[0] ? 128 : 148);
                    break;
                case 4:
                    u[m][l] = 802;
                    break;
                case 5:
                    u[m][l] = 801;
                    break;
                case 6:
                    u[m][l] = 804;
                    break;
                case 7:
                    u[m][l] = 803;
                    break;
                default:
                    console.log("Unhandled resource type: " + A.GetResourceType(l, m))
                }
            }
        for (m = 0; m < u.length; m++)
            for (l = 0; l < u[m].length; l++)
                8 > m ? (c[m][l] = u[m][l],
                d[m][l] = q[m][l],
                b[m][l] = w[m][l]) : 16 > m ? (f[m - 8][l] = u[m][l],
                k[m - 8][l] = q[m][l],
                p[m - 8][l] = w[m][l]) : (O[m - 16][l] = u[m][l],
                a[m - 16][l] = q[m][l],
                r[m - 16][l] = w[m][l]);
        q = n && z.get_AllianceId() == A.get_AllianceId() ? [1 + n.get_POIInfantryBonus() / 100, 1 + n.get_POIVehicleBonus() / 100, 1 + n.get_POIAirBonus() / 100, 1 + A.get_AllianceDefenseBonus() / 100] : [1, 1, 1, 1];
        z = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity();
        D = mc(z);
        E = nc(z);
        u = [1, 1, 1];
        for (m = 0; 8 > m; ++m)
            for (row = [],
            l = 0; 9 > l; ++l)
                if (H = D[l][m],
                x = 0,
                I = null,
                H && 0 <= H.BuildingIndex && (I = E[H.BuildingIndex],
                x = I.get_CurrentLevel()),
                0 === z.GetResourceType(l, m) && I && (H = I.get_MdbBuildingId(),
                GAMEDATA.Tech[H].n in ka))
                    if (w = ka[GAMEDATA.Tech[H].n],
                    129 === w || 149 === w)
                        u[0] = x;
                    else if (130 === w || 150 === w)
                        u[1] = x;
                    else if (131 === w || 151 === w)
                        u[2] = x;
        w = ClientLib.Data.MainData.GetInstance().get_Player();
        m = w.get_PlayerResearch().GetResearchItemListByType(1);
        2 == w.get_Faction() ? (w = m.l[0].get_CurrentLevel(),
        n = m.l[4].get_CurrentLevel(),
        B = m.l[6].get_CurrentLevel(),
        l = m.l[8].get_CurrentLevel(),
        y = m.l[9].get_CurrentLevel(),
        D = m.l[10].get_CurrentLevel(),
        E = m.l[11].get_CurrentLevel(),
        m = m.l[13].get_CurrentLevel()) : m = E = D = y = l = B = n = w = 1;
        return [[c, f, O, d, k, a, b, p, r, [w, n, B, l, y, D, E, m]], q, v, u, z.CalculateAttackCommandPointCostToCoord(A.get_PosX(), A.get_PosY())]
    }
    function Xa(c, d) {
        var b = Math.min.apply(null, d) - 1;
        if (0 < b)
            for (var f = 0; f < d.length; f++)
                5 > d[f] && (d[f] -= b);
        f = ClientLib.Data.MainData.GetInstance().get_Cities();
        b = f.get_CurrentOwnCity();
        f.get_CurrentCity().get_Id();
        f = f.get_CurrentCity().get_Id();
        b.get_Id();
        b = b.get_CityArmyFormationsManager().GetFormationByTargetBaseId(f).get_ArmyUnits();
        if (null == b)
            console.log("tafs Error: You must move a unit befor saving!");
        else {
            b = b.l;
            for (var h in b)
                5 > d[h] ? (b[h].MoveBattleUnit(c[h] - 1, d[h] - 1),
                b[h].set_Enabled(1)) : b[h].set_Enabled(0)
        }
    }
    function xc() {
        var c = ClientLib.Data.MainData.GetInstance().get_Cities()
          , d = c.get_CurrentOwnCity();
        c.get_CurrentCity().get_Id();
        c = c.get_CurrentCity().get_Id();
        d.get_Id();
        d = d.get_CityArmyFormationsManager().GetFormationByTargetBaseId(c).get_ArmyUnits();
        if (null == d)
            console.log("tafs Error: You must move a unit befor saving!");
        else {
            d = d.l;
            c = [];
            var b = [], f;
            for (f in d)
                1 == d[f].get_Enabled() ? (b.push(d[f].get_CoordX() + 1),
                c.push(d[f].get_CoordY() + 1)) : (b.push(d[f].get_CoordX() + 1),
                c.push(d[f].get_CoordY() + 1 + 4));
            return [b, c]
        }
    }
    function gb() {
        for (var c = document.getElementsByTagName("script"), d = 0; d < c.length; d++)
            if (-1 != c[d].innerHTML.search(/OptFarmBase/g)) {
                document.getElementsByTagName("head")[0].removeChild(c[d]);
                break
            }
    }
    function zc() {
        qx.Class.define("Optimize", {
            type: "singleton",
            extend: qx.core.Object,
            members: {
                g: null,
                k: function() {
                    var c = qx.core.Init.getApplication().getPlayArea().getHUD().getUIItem(ClientLib.Data.Missions.PATH.WDG_COMBATSWAPVIEW)
                      , d = (new webfrontend.ui.SoundButton("Расставить")).set({
                        toolTipText: "Найти лучшую расстановку",
                        width: 74,
                        height: 22,
                        allowGrowX: !1,
                        allowGrowY: !1,
                        appearance: "button-baseviews",
                        marginRight: 6
                    });
                    d.addListener("click", function() {
                        var b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity()
                          , c = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity();
                        N = 250;
                        null !== b && null !== c && (b = ma(),
                        c = fa(b[0], b[1], b[2], b[3], 3, .11, 2 * b[4], 0),
                        4 < Math.min(c[1]) && (c = fa(b[0], b[1], b[2], b[3], 3, .03, 2 * b[4], 0),
                        4 < Math.min(c[1]) && (c = fa(b[0], b[1], b[2], b[3], 3, .01, 2 * b[4], 0))),
                        Xa(c[0], c[1]),
                        ClientLib.API.Battleground.GetInstance().SimulateBattle(),
                        qx.core.Init.getApplication().getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().get_Id(), 0, 0));
                        N = 35
                    }, this);
                    c.getLayoutParent().addAfter(d, c);
                    gb()
                }
            }
        });
        qx.Class.define("ReOptimize", {
            type: "singleton",
            extend: qx.core.Object,
            members: {
                g: null,
                k: function() {
                    var c = qx.core.Init.getApplication().getPlayArea().getHUD().getUIItem(ClientLib.Data.Missions.PATH.WDG_COMBATSWAPVIEW)
                      , d = (new webfrontend.ui.SoundButton("Улучшить")).set({
                        toolTipText: "Найти улучшение",
                        width: 74,
                        height: 22,
                        allowGrowX: !1,
                        allowGrowY: !1,
                        appearance: "button-baseviews",
                        marginRight: 6
                    });
                    d.addListener("click", function() {
                        var b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity()
                          , c = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity();
                        N = 50;
                        null !== b && null !== c && (b = ma(),
                        c = fa(b[0], b[1], b[2], b[3], 3, .11, 2 * b[4], 1),
                        4 < Math.min(c[1]) && (c = fa(b[0], b[1], b[2], b[3], 3, .03, 2 * b[4], 1),
                        4 < Math.min(c[1]) && (c = fa(b[0], b[1], b[2], b[3], 3, .01, 2 * b[4], 1))),
                        Xa(c[0], c[1]),
                        ClientLib.API.Battleground.GetInstance().SimulateBattle(),
                        qx.core.Init.getApplication().getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().get_Id(), 0, 0));
                        N = 35
                    }, this);
                    c.getLayoutParent().addAfter(d, c);
                    gb()
                }
            }
        });
        qx.Class.define("Kill", {
            type: "singleton",
            extend: qx.core.Object,
            members: {
                timeID: null,
                k: function() {
                    var c = qx.core.Init.getApplication().getPlayArea().getHUD().getUIItem(ClientLib.Data.Missions.PATH.WDG_COMBATSWAPVIEW)
                      , d = (new webfrontend.ui.SoundButton("Kill")).set({
                        toolTipText: "Optimize and attack until it's dead",
                        width: 54,
                        height: 22,
                        allowGrowX: !1,
                        allowGrowY: !1,
                        appearance: "button-baseviews",
                        marginRight: 6
                    });
                    d.addListener("click", function() {
                        console.log("0: " + this.timeID);
                        N = 50;
                        if (null === this.timeID) {
                            var b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity()
                              , c = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity()
                              , h = ClientLib.Data.MainData.GetInstance().get_World()
                              , q = h.GetObjectFromPosition(b.get_PosX(), b.get_PosY());
                            null !== b && null !== c && (Ka = 320 == ClientLib.Data.MainData.GetInstance().get_Server().get_WorldId() ? 7 : 3,
                            this.timeID = setInterval(function() {
                                var b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity()
                                  , a = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity()
                                  , c = h.GetObjectFromPosition(b.get_PosX(), b.get_PosY());
                                q !== c ? (p = 1,
                                B = k = 0,
                                console.log("Object dead or unavailable")) : (console.log("Outgoing:" + a.get_HasOutgoingAttack() + " Incoming:" + b.get_HasIncommingAttack()),
                                !0 === a.get_HasOutgoingAttack() && !0 === b.get_HasIncommingAttack() && (B = k = 0),
                                !1 === a.get_HasOutgoingAttack() && 100 > a.GetOffenseConditionInPercent() && (320 == ClientLib.Data.MainData.GetInstance().get_Server().get_WorldId() ? sa() : (a = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                a.get_CityRepairData().RepairAll(ClientLib.Vis.Mode.ArmySetup)),
                                k = 0,
                                console.log("repairing. optzd=" + k)),
                                !1 === b.get_HasIncommingAttack() && 1 === p ? (a = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                c = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().get_Id(),
                                ClientLib.Data.MainData.GetInstance().get_Cities().GetCity(c),
                                qx.core.Init.getApplication().getPlayArea().setView(3, 0, 0, 0),
                                ClientLib.Vis.VisMain.GetInstance().Update(),
                                ClientLib.Vis.VisMain.GetInstance().ViewUpdate(),
                                qx.core.Init.getApplication().getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, c, 0, 0),
                                console.log("Object underattack=" + b.get_HasIncommingAttack() + " optzd=" + k),
                                0 === k && 100 === a.GetOffenseConditionInPercent() && 0 === B ? (k = 1,
                                p = 0,
                                console.log("optimization under way. optzd=" + k),
                                b = ma(),
                                c = fa(b[0], b[1], b[2], b[3], 3, .1, b[4], 1),
                                4 < Math.min(c[1]) && (c = fa(b[0], b[1], b[2], b[3], 3, .03, b[4], 1),
                                4 < Math.min(c[1]) && (c = fa(b[0], b[1], b[2], b[3], 3, .01, b[4], 1))),
                                Xa(c[0], c[1]),
                                window.setTimeout(function() {
                                    ClientLib.API.Battleground.GetInstance().SimulateBattle();
                                    p = 1;
                                    B++
                                }, 1E3)) : 100 === a.GetOffenseConditionInPercent() && 1 === p && 1 === k ? (console.log("trying to send attack. optzd=" + k),
                                qx.core.Init.getApplication().getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().get_Id(), 0, 0),
                                b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity(),
                                a = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                b.InvokeBattle(a, phe.cnc.Util.createEventDelegate(ClientLib.Net.CommandResult, null, function(a, b) {
                                    console.log("Sending attack! optzd=" + k)
                                }), b.get_Id())) : console.log("Sent attack successfully! Hold until it ends. optzd=" + k),
                                !1 === a.get_HasOutgoingAttack() && 100 > a.GetOffenseConditionInPercent() && (320 == ClientLib.Data.MainData.GetInstance().get_Server().get_WorldId() ? sa() : (a = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                a.get_CityRepairData().RepairAll(ClientLib.Vis.Mode.ArmySetup)),
                                console.log("repairing"))) : console.log("Object underattack=" + b.get_HasIncommingAttack()))
                            }, 1E3 * Ka),
                            d.setLabel("Stop"),
                            d.setToolTipText("Stop Killing"))
                        } else
                            clearInterval(this.timeID),
                            this.timeID = null,
                            d.setLabel("Убить"),
                            d.setToolTipText("Расставит войска и убьет цель"),
                            p = 1,
                            B = k = 0,
                            N = 35
                    }, this);
                    c.getLayoutParent().addAfter(d, c);
                    gb()
                }
            }
        });
        qx.Class.define("Soften", {
            type: "singleton",
            extend: qx.core.Object,
            members: {
                timeID: null,
                k: function() {
                    phe.cnc.Util.attachNetEvent(ClientLib.API.Battleground.GetInstance(), "OnSimulateBattleFinished", ClientLib.API.OnSimulateBattleFinished, this, this.onSimulateBattleFinishedEvent);
                    var c = qx.core.Init.getApplication().getPlayArea().getHUD().getUIItem(ClientLib.Data.Missions.PATH.WDG_COMBATSWAPVIEW)
                      , d = (new webfrontend.ui.SoundButton("Ослабить")).set({
                        toolTipText: "Атака но не убивает до конца",
                        width: 64,
                        height: 22,
                        allowGrowX: !1,
                        allowGrowY: !1,
                        appearance: "button-baseviews",
                        marginRight: 6
                    });
                    d.addListener("click", function() {
                        console.log("0: " + this.timeID);
                        N = 35;
                        if (null === this.timeID) {
                            var b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity()
                              , c = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity()
                              , h = ClientLib.Data.MainData.GetInstance().get_World()
                              , q = h.GetObjectFromPosition(b.get_PosX(), b.get_PosY());
                            null !== b && null !== c && (Ka = 320 == ClientLib.Data.MainData.GetInstance().get_Server().get_WorldId() ? 7 : 3,
                            this.timeID = setInterval(function() {
                                var b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity()
                                  , a = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity()
                                  , c = h.GetObjectFromPosition(b.get_PosX(), b.get_PosY());
                                q !== c || 1 === hb ? (p = 1,
                                B = k = 0,
                                console.log("Object dead or unavailable")) : (console.log("Outgoing:" + a.get_HasOutgoingAttack() + " Incoming:" + b.get_HasIncommingAttack()),
                                !0 === a.get_HasOutgoingAttack() && !0 === b.get_HasIncommingAttack() && (B = k = 0),
                                !1 === a.get_HasOutgoingAttack() && 100 > a.GetOffenseConditionInPercent() && (320 == ClientLib.Data.MainData.GetInstance().get_Server().get_WorldId() ? sa() : (a = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                a.get_CityRepairData().RepairAll(ClientLib.Vis.Mode.ArmySetup)),
                                k = 0,
                                console.log("repairing. optzd=" + k)),
                                !1 === b.get_HasIncommingAttack() && 1 === p && 0 === hb ? (a = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                c = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().get_Id(),
                                ClientLib.Data.MainData.GetInstance().get_Cities().GetCity(c),
                                qx.core.Init.getApplication().getPlayArea().setView(3, 0, 0, 0),
                                ClientLib.Vis.VisMain.GetInstance().Update(),
                                ClientLib.Vis.VisMain.GetInstance().ViewUpdate(),
                                qx.core.Init.getApplication().getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, c, 0, 0),
                                console.log("Object underattack=" + b.get_HasIncommingAttack() + " optzd=" + k),
                                0 === k && 100 === a.GetOffenseConditionInPercent() && 0 === B ? (k = 1,
                                p = 0,
                                za = y = 101,
                                console.log("optimization under way. optzd=" + k),
                                b = ma(),
                                c = fa(b[0], b[1], b[2], b[3], 3, .1, b[4], 1),
                                4 < Math.min(c[1]) && (c = fa(b[0], b[1], b[2], b[3], 3, .03, b[4], 1),
                                4 < Math.min(c[1]) && (c = fa(b[0], b[1], b[2], b[3], 3, .01, b[4], 1))),
                                Xa(c[0], c[1]),
                                window.setTimeout(function() {
                                    ClientLib.API.Battleground.GetInstance().SimulateBattle();
                                    p = 1;
                                    B++
                                }, 1E3)) : 100 === a.GetOffenseConditionInPercent() && 1 === p && 1 === k ? 0 < y && 101 > y ? (console.log("trying to send attack. optzd=" + k),
                                qx.core.Init.getApplication().getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().get_Id(), 0, 0),
                                b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity(),
                                a = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                b.InvokeBattle(a, phe.cnc.Util.createEventDelegate(ClientLib.Net.CommandResult, null, function(a, b) {
                                    console.log("Sending attack! optzd=" + k)
                                }), b.get_Id())) : 101 != y && 0 == y && (console.log("Finished softening"),
                                hb = 1) : console.log("Sent attack successfully! Hold until it ends. optzd=" + k),
                                !1 === a.get_HasOutgoingAttack() && 100 > a.GetOffenseConditionInPercent() && (320 == ClientLib.Data.MainData.GetInstance().get_Server().get_WorldId() ? sa() : (a = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                a.get_CityRepairData().RepairAll(ClientLib.Vis.Mode.ArmySetup)),
                                console.log("repairing"))) : console.log("Object underattack=" + b.get_HasIncommingAttack()))
                            }, 1E3 * Ka),
                            d.setLabel("Stop"),
                            d.setToolTipText("Stop Softening"))
                        } else
                            clearInterval(this.timeID),
                            this.timeID = null,
                            d.setLabel("Soften"),
                            d.setToolTipText("Optimize and attack, leave last hit to finish"),
                            p = 1,
                            B = hb = k = 0,
                            N = 35
                    }, this);
                    c.getLayoutParent().addAfter(d, c);
                    gb()
                },
                onSimulateBattleFinishedEvent: function(c) {
                    console.log(c);
                    try {
                        for (var d = 0; d < c.length; d++) {
                            var b = c[d].Value
                              , f = b.t
                              , k = ClientLib.Res.ResMain.GetInstance().GetUnit_Obj(f)
                              , p = b.sh
                              , q = b.h
                              , a = ClientLib.API.Util.GetUnitMaxHealthByLevel(b.l, k, !1);
                            switch (f) {
                            case 131:
                            case 158:
                            case 195:
                                za = 0 < p ? q / 16 / a * 100 : 0;
                                break;
                            case 112:
                            case 151:
                            case 177:
                                y = q / 16 / a * 100;
                                break;
                            case 251:
                                y = q / 16 / a * 100
                            }
                        }
                        console.log("structuresconstruction = " + y);
                        console.log("structuresdefense = " + za)
                    } catch (r) {
                        console.log("onSimulateBattleFinishedEvent()\n check getRepairCost()", r)
                    }
                }
            }
        })
    }
    function Vb() {
        try {
            "undefined" !== typeof qx && "" !== ClientLib.Data.MainData.GetInstance().get_Player().get_Name() ? (zc(),
            Optimize.getInstance().k(),
            ReOptimize.getInstance().k(),
            Kill.getInstance().k(),
            Soften.getInstance().k()) : setTimeout(Vb, 6500)
        } catch (F) {
            "undefined" !== typeof console ? console.log(F + ": " + F.stack) : window.opera ? opera.postError(F) : GM_log(F)
        }
    }
    function Ac() {
        qx.Class.define("CCTAbot.main", {
            type: "singleton",
            extend: qx.core.Object,
            members: {
                timeID: null,
                buttons: {
                    btnFarmWell: null,
                    btnFarmFast: null
                },
                initialize: function() {
                    try {
                        var c = qx.core.Init.getApplication();
                        qx.core.Init.getApplication().getUIItem(ClientLib.Data.Missions.PATH.OVL_PLAYAREA);
                        this.buttons.btnFarmFast = new qx.ui.form.Button("FarmFast");
                        this.buttons.btnFarmFast.set({
                            width: 100,
                            height: 20,
                            appearance: "button-baseviews",
                            toolTipText: "Start Farming"
                        });
                        this.buttons.btnFarmFast.addListener("click", this.FarmAllFast, this);
                        this.buttons.btnFarmWell = new qx.ui.form.Button("FarmWell");
                        this.buttons.btnFarmWell.set({
                            width: 100,
                            height: 20,
                            appearance: "button-baseviews",
                            toolTipText: "Start Farming"
                        });
                        this.buttons.btnFarmWell.addListener("click", this.FarmAllWell, this);
                        var d = ClientLib.Data.WorldSector.WorldObjectNPCCamp.prototype;
                        ca = Wb(d.$ctor, /100\){0,1};this\.(.{6})=Math.floor.*this\.(.{6})=\(*g>>(22|0x16)\)*&.*=-1;\}this\.(.{6})=\(/, "ClientLib.Data.WorldSector.WorldObjectNPCCamp", 4);
                        d = ClientLib.Data.WorldSector.WorldObjectNPCBase.prototype;
                        $a = Wb(d.$ctor, /100\){0,1};this\.(.{6})=Math.floor.*d\+=f;this\.(.{6})=\(/, "ClientLib.Data.WorldSector.WorldObjectNPCBase", 2);
                        phe.cnc.Util.attachNetEvent(ClientLib.API.Battleground.GetInstance(), "OnSimulateBattleFinished", ClientLib.API.OnSimulateBattleFinished, this, this.onSimulateBattleFinishedEvent);
                        c.getDesktop().add(this.buttons.btnFarmFast, {
                            right: 8,
                            bottom: 313
                        });
                        c.getDesktop().add(this.buttons.btnFarmWell, {
                            right: 8,
                            bottom: 292
                        });
                        webfrontend.gui.reports.CombatVictoryPopup.getInstance().addListener("appear", function() {
                            webfrontend.gui.reports.CombatVictoryPopup.getInstance()._onBtnClose()
                        }, this)
                    } catch (b) {
                        console.log(b)
                    }
                },
                FarmAllFast: function() {
                    try {
                        if (Ka = 320 == ClientLib.Data.MainData.GetInstance().get_Server().get_WorldId() ? 7 : 3,
                        null === this.timeID) {
                            var q = Date.now();
                            this.timeID = setInterval(function() {
                                console.log("Here, state=" + E + ", targcnt=" + d + "/" + c.length);
                                var h = Date.now();
                                320 !== ClientLib.Data.MainData.GetInstance().get_Server().get_WorldId() && 18E6 < h - q && (q = h,
                                p = 1,
                                d = E = B = k = 0);
                                if (0 === E) {
                                    N = 50;
                                    c = [];
                                    var b = ta = 0
                                      , f = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity();
                                    !1 === f.get_HasOutgoingAttack() && 100 > f.GetOffenseConditionInPercent() && (320 == ClientLib.Data.MainData.GetInstance().get_Server().get_WorldId() ? sa() : (f = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                    f.get_CityRepairData().RepairAll(ClientLib.Vis.Mode.ArmySetup)));
                                    f = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity();
                                    var x = f.get_PosX()
                                      , F = f.get_PosY()
                                      , O = ClientLib.Data.MainData.GetInstance().get_Server().get_MaxAttackDistance();
                                    h = ClientLib.Data.MainData.GetInstance().get_World();
                                    for (var a = F - 11; a <= F + 11; a++)
                                        for (var r = x - 11; r <= x + 11; r++) {
                                            var J = Math.abs(x - r)
                                              , u = Math.abs(F - a);
                                            u = Math.sqrt(J * J + u * u);
                                            J = f.CalculateAttackCommandPointCostToCoord(r, a);
                                            var w = 320 == ClientLib.Data.MainData.GetInstance().get_Server().get_WorldId() ? 41 : 25;
                                            J > w || u > O || (w = ClientLib.Base.MathUtil.EncodeCoordId(r, a),
                                            ib[w] || (u = h.GetObjectFromPosition(r, a),
                                            null != u && (void 0 !== u[$a[1]] ? 0 < u[$a[1]] && 320 == ClientLib.Data.MainData.GetInstance().get_Server().get_WorldId() && (c[b] = {
                                                x: r,
                                                y: a,
                                                id: u[$a[2]],
                                                tp: 1,
                                                rpcp: 0,
                                                cp: J,
                                                cord: w,
                                                city: f.get_Id()
                                            },
                                            b++) : void 0 === u[ca[2]] || 1 > u[ca[2]] || 3 < u[ca[2]] || 0 > u[ca[1]] - ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity().get_LvlOffense() + 3 || (c[b] = {
                                                x: r,
                                                y: a,
                                                id: u[ca[4]],
                                                tp: u[ca[2]],
                                                rpcp: 0,
                                                cp: J,
                                                cord: w,
                                                city: f.get_Id()
                                            },
                                            b++))))
                                        }
                                    console.log(c);
                                    d = 0;
                                    E = 1;
                                    d < c.length && (r = c[d].x,
                                    a = c[d].y,
                                    h = ClientLib.Data.MainData.GetInstance().get_World(),
                                    u = h.GetObjectFromPosition(r, a),
                                    ClientLib.Data.MainData.GetInstance().get_Cities().set_CurrentCityId(c[d].id),
                                    f = qx.core.Init.getApplication(),
                                    b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                    null != b && b.get_CityArmyFormationsManager().set_CurrentTargetBaseId(c[d].id),
                                    f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSimulation, c[d].id, 0, 0),
                                    f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, c[d].id, 0, 0))
                                } else if (1 === E && d < c.length) {
                                    h = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity();
                                    if (null !== h) {
                                        r = c[d].x;
                                        a = c[d].y;
                                        h = ClientLib.Data.MainData.GetInstance().get_World();
                                        u = h.GetObjectFromPosition(r, a);
                                        h = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity();
                                        b = ClientLib.Data.MainData.GetInstance().get_Cities().GetCity(ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().get_Id());
                                        if (null === b || null === h || void 0 === b || void 0 === h)
                                            return;
                                        a = ma();
                                        if (null === a)
                                            return;
                                        b = Pa(a[0], a[1], a[2], a[3], 3, .33, a[4]);
                                        console.log("can kill: " + b[0] + " " + b[1] + "  " + b[2]);
                                        2 >= c[d].tp && 1 === ClientLib.Data.MainData.GetInstance().get_Player().get_Faction() ? f = b[2] - ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity().get_LvlOffense() + 1.999 : 2 >= c[d].tp && 2 === ClientLib.Data.MainData.GetInstance().get_Player().get_Faction() ? f = b[2] - ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity().get_LvlOffense() + 1.999 : 3 === c[d].tp && (f = b[2] - ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity().get_LvlOffense() + 2.5);
                                        h = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity();
                                        respcp = b[1] / c[d].cp;
                                        0 > f ? c[d].rpcp = 0 : !0 === h.get_IsDamaged() && 320 !== ClientLib.Data.MainData.GetInstance().get_Server().get_WorldId() ? c[d].rpcp = 0 : h.get_HasIncommingAttack() ? c[d].rpcp = 0 : 100 === b[0] && 320 == ClientLib.Data.MainData.GetInstance().get_Server().get_WorldId() ? c[d].rpcp = respcp / 5 : c[d].rpcp = 100 === b[0] ? respcp / 5 : 50 < b[0] ? respcp / 2 : respcp;
                                        console.log(c[d].rpcp);
                                        d++
                                    } else
                                        3 > ta ? ta++ : (ta = 0,
                                        d++);
                                    d < c.length && (r = c[d].x,
                                    a = c[d].y,
                                    h = ClientLib.Data.MainData.GetInstance().get_World(),
                                    u = h.GetObjectFromPosition(r, a),
                                    ClientLib.Data.MainData.GetInstance().get_Cities().set_CurrentCityId(c[d].id),
                                    f = qx.core.Init.getApplication(),
                                    b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                    null != b && b.get_CityArmyFormationsManager().set_CurrentTargetBaseId(c[d].id),
                                    f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSimulation, c[d].id, 0, 0),
                                    f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, c[d].id, 0, 0))
                                } else if (1 === E && d === c.length)
                                    0 < c.length ? (c.sort(function(a, b) {
                                        return parseFloat(b.rpcp) - parseFloat(a.rpcp)
                                    }),
                                    E = 2,
                                    d = 0,
                                    d < c.length && (r = c[d].x,
                                    a = c[d].y,
                                    h = ClientLib.Data.MainData.GetInstance().get_World(),
                                    u = h.GetObjectFromPosition(r, a),
                                    ClientLib.Data.MainData.GetInstance().get_Cities().set_CurrentCityId(c[d].id),
                                    f = qx.core.Init.getApplication(),
                                    b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                    null != b && b.get_CityArmyFormationsManager().set_CurrentTargetBaseId(c[d].id),
                                    f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSimulation, c[d].id, 0, 0),
                                    f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, c[d].id, 0, 0))) : (d = E = 0,
                                    qx.core.Init.getApplication().getPlayArea().setView(9, 0, 0, 0),
                                    ClientLib.Vis.VisMain.GetInstance().Update(),
                                    ClientLib.Vis.VisMain.GetInstance().ViewUpdate());
                                else if (2 === E && d < c.length && 0 < c[d].rpcp)
                                    if (a = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity(),
                                    b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                    h = ClientLib.Data.MainData.GetInstance().get_World(),
                                    null !== a && null !== b)
                                        if (void 0 === h.GetObjectFromPosition(a.get_PosX(), a.get_PosY()))
                                            p = 1,
                                            B = k = 0,
                                            console.log("Object dead or new"),
                                            c[d].rpcp = 0,
                                            c.sort(function(a, b) {
                                                return parseFloat(b.rpcp) - parseFloat(a.rpcp)
                                            }),
                                            0 === c[d].rpcp ? (d = E = 0,
                                            qx.core.Init.getApplication().getPlayArea().setView(9, 0, 0, 0),
                                            ClientLib.Vis.VisMain.GetInstance().Update(),
                                            ClientLib.Vis.VisMain.GetInstance().ViewUpdate()) : (r = c[d].x,
                                            a = c[d].y,
                                            h = ClientLib.Data.MainData.GetInstance().get_World(),
                                            u = h.GetObjectFromPosition(r, a),
                                            ClientLib.Data.MainData.GetInstance().get_Cities().set_CurrentCityId(c[d].id),
                                            f = qx.core.Init.getApplication(),
                                            b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                            null != b && b.get_CityArmyFormationsManager().set_CurrentTargetBaseId(c[d].id),
                                            f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSimulation, c[d].id, 0, 0),
                                            f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, c[d].id, 0, 0));
                                        else if (!0 === b.get_HasOutgoingAttack() && !0 === a.get_HasIncommingAttack() && (B = k = 0),
                                        !1 === b.get_HasOutgoingAttack() && 100 > b.GetOffenseConditionInPercent() && (320 == ClientLib.Data.MainData.GetInstance().get_Server().get_WorldId() ? sa() : (f = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                        f.get_CityRepairData().RepairAll(ClientLib.Vis.Mode.ArmySetup)),
                                        k = 0),
                                        !1 === a.get_HasIncommingAttack() && 1 === p) {
                                            h = 0;
                                            100 == ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().GetDefenseConditionInPercent() ? (N = 110,
                                            h = 0) : (N = 35,
                                            h = 1);
                                            f = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity();
                                            r = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().get_Id();
                                            f = ClientLib.Data.MainData.GetInstance().get_Cities().GetCity(r);
                                            qx.core.Init.getApplication().getPlayArea().setView(3, 0, 0, 0);
                                            ClientLib.Vis.VisMain.GetInstance().Update();
                                            ClientLib.Vis.VisMain.GetInstance().ViewUpdate();
                                            qx.core.Init.getApplication().getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, r, 0, 0);
                                            console.log("Object underattack=" + a.get_HasIncommingAttack());
                                            if (0 === k && 100 === b.GetOffenseConditionInPercent() && 0 === B) {
                                                console.log("optimization under way: gg=" + p + " optzd=" + k);
                                                a = ma();
                                                if (null === a)
                                                    return;
                                                k = 1;
                                                p = 0;
                                                za = y = 101;
                                                f = fa(a[0], a[1], a[2], a[3], 3, .33, a[4], h);
                                                4 < Math.min(f[1]) && (f = fa(a[0], a[1], a[2], a[3], 3, .1, a[4], h),
                                                4 < Math.min(f[1]) && (f = fa(a[0], a[1], a[2], a[3], 3, .03, a[4], h)));
                                                Xa(f[0], f[1]);
                                                window.setTimeout(function() {
                                                    ClientLib.API.Battleground.GetInstance().SimulateBattle();
                                                    p = 1;
                                                    B++
                                                }, 1E3)
                                            } else if (100 === b.GetOffenseConditionInPercent() && 1 === p && 1 === k)
                                                if (320 == ClientLib.Data.MainData.GetInstance().get_Server().get_WorldId())
                                                    qx.core.Init.getApplication().getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().get_Id(), 0, 0),
                                                    Math.floor(ClientLib.Data.MainData.GetInstance().get_Player().GetCommandPointCount()) >= c[d].cp ? (a = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity(),
                                                    b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                                    a.InvokeBattle(b, phe.cnc.Util.createEventDelegate(ClientLib.Net.CommandResult, null, function(a, b) {
                                                        console.log("Can do optimization again" + k)
                                                    }), a.get_Id())) : console.log("Wait until enough cp");
                                                else {
                                                    if (101 != y)
                                                        if (2 === ClientLib.Data.MainData.GetInstance().get_Player().get_Faction() && 2 >= c[d].tp && 0 === y)
                                                            console.log("One-shot!!!"),
                                                            console.log("attack under way: gg=" + p + " optzd=" + k),
                                                            qx.core.Init.getApplication().getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().get_Id(), 0, 0),
                                                            Math.floor(ClientLib.Data.MainData.GetInstance().get_Player().GetCommandPointCount()) >= c[d].cp ? (a = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity(),
                                                            b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                                            a.InvokeBattle(b, phe.cnc.Util.createEventDelegate(ClientLib.Net.CommandResult, null, function(a, b) {
                                                                console.log("Can do optimization again" + k)
                                                            }), a.get_Id())) : console.log("Wait until enough cp");
                                                        else if (1 === ClientLib.Data.MainData.GetInstance().get_Player().get_Faction() && 2 >= c[d].tp && 50 > y)
                                                            console.log("Two-shot!!!"),
                                                            console.log("attack under way: gg=" + p + " optzd=" + k),
                                                            qx.core.Init.getApplication().getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().get_Id(), 0, 0),
                                                            Math.floor(ClientLib.Data.MainData.GetInstance().get_Player().GetCommandPointCount()) >= 2 * c[d].cp ? (a = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity(),
                                                            b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                                            a.InvokeBattle(b, phe.cnc.Util.createEventDelegate(ClientLib.Net.CommandResult, null, function(a, b) {
                                                                console.log("Can do optimization again" + k)
                                                            }), a.get_Id())) : console.log("Wait until enough cp");
                                                        else if (3 === c[d].tp && 90 > y)
                                                            if (0 === y)
                                                                console.log("One-shot!!!"),
                                                                console.log("attack under way: gg=" + p + " optzd=" + k),
                                                                qx.core.Init.getApplication().getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().get_Id(), 0, 0),
                                                                Math.floor(ClientLib.Data.MainData.GetInstance().get_Player().GetCommandPointCount()) >= c[d].cp ? (a = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity(),
                                                                b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                                                a.InvokeBattle(b, phe.cnc.Util.createEventDelegate(ClientLib.Net.CommandResult, null, function(a, b) {
                                                                    console.log("Can do optimization again" + k)
                                                                }), a.get_Id())) : console.log("Wait until enough cp");
                                                            else if (50 > y)
                                                                console.log("structure cy: " + y),
                                                                console.log("Two-shot!!! Lets go!"),
                                                                console.log("attack under way: gg=" + p + " optzd=" + k),
                                                                qx.core.Init.getApplication().getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().get_Id(), 0, 0),
                                                                Math.floor(ClientLib.Data.MainData.GetInstance().get_Player().GetCommandPointCount()) >= 2 * c[d].cp ? (a = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity(),
                                                                b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                                                a.InvokeBattle(b, phe.cnc.Util.createEventDelegate(ClientLib.Net.CommandResult, null, function(a, b) {
                                                                    console.log("Can do optimization again" + k)
                                                                }), a.get_Id())) : console.log("Wait until enough cp");
                                                            else if (90 > y && 50 > za)
                                                                console.log("structures cy: " + y + " df: " + za),
                                                                console.log("Likely two-shot!!! Worth doing!"),
                                                                console.log("attack under way: gg=" + p + " optzd=" + k),
                                                                qx.core.Init.getApplication().getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().get_Id(), 0, 0),
                                                                Math.floor(ClientLib.Data.MainData.GetInstance().get_Player().GetCommandPointCount()) >= 2 * c[d].cp ? (a = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity(),
                                                                b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                                                a.InvokeBattle(b, phe.cnc.Util.createEventDelegate(ClientLib.Net.CommandResult, null, function(a, b) {
                                                                    console.log("Can do optimization again" + k)
                                                                }), a.get_Id())) : console.log("Wait until enough cp");
                                                            else {
                                                                console.log("structure cy: " + y);
                                                                p = 1;
                                                                B = k = 0;
                                                                console.log("Object cannot be one-shot or two-shot");
                                                                w = ClientLib.Base.MathUtil.EncodeCoordId(c[d].x, c[d].y);
                                                                ib[w] = 1;
                                                                c[d].rpcp = 0;
                                                                c.sort(function(a, b) {
                                                                    return parseFloat(b.rpcp) - parseFloat(a.rpcp)
                                                                });
                                                                if (0 === c[d].rpcp) {
                                                                    d = E = 0;
                                                                    qx.core.Init.getApplication().getPlayArea().setView(9, 0, 0, 0);
                                                                    ClientLib.Vis.VisMain.GetInstance().Update();
                                                                    ClientLib.Vis.VisMain.GetInstance().ViewUpdate();
                                                                    return
                                                                }
                                                                r = c[d].x;
                                                                a = c[d].y;
                                                                h = ClientLib.Data.MainData.GetInstance().get_World();
                                                                u = h.GetObjectFromPosition(r, a);
                                                                ClientLib.Data.MainData.GetInstance().get_Cities().set_CurrentCityId(c[d].id);
                                                                f = qx.core.Init.getApplication();
                                                                b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity();
                                                                null != b && b.get_CityArmyFormationsManager().set_CurrentTargetBaseId(c[d].id);
                                                                f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSimulation, c[d].id, 0, 0);
                                                                f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, c[d].id, 0, 0);
                                                                return
                                                            }
                                                        else {
                                                            console.log("structure cy: " + y);
                                                            p = 1;
                                                            B = k = 0;
                                                            console.log("Object cannot be one-shot or two-shot");
                                                            w = ClientLib.Base.MathUtil.EncodeCoordId(c[d].x, c[d].y);
                                                            ib[w] = 1;
                                                            c[d].rpcp = 0;
                                                            c.sort(function(a, b) {
                                                                return parseFloat(b.rpcp) - parseFloat(a.rpcp)
                                                            });
                                                            if (0 === c[d].rpcp) {
                                                                d = E = 0;
                                                                qx.core.Init.getApplication().getPlayArea().setView(9, 0, 0, 0);
                                                                ClientLib.Vis.VisMain.GetInstance().Update();
                                                                ClientLib.Vis.VisMain.GetInstance().ViewUpdate();
                                                                return
                                                            }
                                                            r = c[d].x;
                                                            a = c[d].y;
                                                            h = ClientLib.Data.MainData.GetInstance().get_World();
                                                            u = h.GetObjectFromPosition(r, a);
                                                            ClientLib.Data.MainData.GetInstance().get_Cities().set_CurrentCityId(c[d].id);
                                                            f = qx.core.Init.getApplication();
                                                            b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity();
                                                            null != b && b.get_CityArmyFormationsManager().set_CurrentTargetBaseId(c[d].id);
                                                            f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSimulation, c[d].id, 0, 0);
                                                            f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, c[d].id, 0, 0);
                                                            return
                                                        }
                                                }
                                            else
                                                console.log("Hold:  gg=" + p + " optzd=" + k);
                                            !1 === b.get_HasOutgoingAttack() && 100 > b.GetOffenseConditionInPercent() && (320 == ClientLib.Data.MainData.GetInstance().get_Server().get_WorldId() ? sa() : (f = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                            f.get_CityRepairData().RepairAll(ClientLib.Vis.Mode.ArmySetup)))
                                        } else
                                            console.log("Object underattack=" + a.get_HasIncommingAttack() + " gg=" + p + " optzd=" + k);
                                    else
                                        p = 1,
                                        B = k = 0,
                                        console.log("Object dead or new"),
                                        c[d].rpcp = 0,
                                        c.sort(function(a, b) {
                                            return parseFloat(b.rpcp) - parseFloat(a.rpcp)
                                        }),
                                        0 === c[d].rpcp ? (d = E = 0,
                                        qx.core.Init.getApplication().getPlayArea().setView(9, 0, 0, 0),
                                        ClientLib.Vis.VisMain.GetInstance().Update(),
                                        ClientLib.Vis.VisMain.GetInstance().ViewUpdate()) : (r = c[d].x,
                                        a = c[d].y,
                                        h = ClientLib.Data.MainData.GetInstance().get_World(),
                                        u = h.GetObjectFromPosition(r, a),
                                        ClientLib.Data.MainData.GetInstance().get_Cities().set_CurrentCityId(c[d].id),
                                        f = qx.core.Init.getApplication(),
                                        b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                        null != b && b.get_CityArmyFormationsManager().set_CurrentTargetBaseId(c[d].id),
                                        f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSimulation, c[d].id, 0, 0),
                                        f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, c[d].id, 0, 0));
                                else
                                    p = 1,
                                    B = k = 0,
                                    console.log("Object dead or new"),
                                    w = ClientLib.Base.MathUtil.EncodeCoordId(c[d].x, c[d].y),
                                    ib[w] = 1,
                                    c[d].rpcp = 0,
                                    c.sort(function(a, b) {
                                        return parseFloat(b.rpcp) - parseFloat(a.rpcp)
                                    }),
                                    0 === c[d].rpcp ? (d = E = 0,
                                    qx.core.Init.getApplication().getPlayArea().setView(9, 0, 0, 0),
                                    ClientLib.Vis.VisMain.GetInstance().Update(),
                                    ClientLib.Vis.VisMain.GetInstance().ViewUpdate()) : (r = c[d].x,
                                    a = c[d].y,
                                    h = ClientLib.Data.MainData.GetInstance().get_World(),
                                    u = h.GetObjectFromPosition(r, a),
                                    ClientLib.Data.MainData.GetInstance().get_Cities().set_CurrentCityId(c[d].id),
                                    f = qx.core.Init.getApplication(),
                                    b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                    null != b && b.get_CityArmyFormationsManager().set_CurrentTargetBaseId(c[d].id),
                                    f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSimulation, c[d].id, 0, 0),
                                    f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, c[d].id, 0, 0))
                            }, 1E3 * Ka);
                            this.buttons.btnFarmFast.setLabel("STOP");
                            this.buttons.btnFarmFast.setToolTipText("Stop Farming")
                        } else
                            clearInterval(this.timeID),
                            this.timeID = null,
                            this.buttons.btnFarmFast.setLabel("FarmFast"),
                            this.buttons.btnFarmFast.setToolTipText("Start Farming"),
                            p = 1,
                            B = d = E = k = 0,
                            qx.core.Init.getApplication().getPlayArea().setView(9, 0, 0, 0),
                            ClientLib.Vis.VisMain.GetInstance().Update(),
                            ClientLib.Vis.VisMain.GetInstance().ViewUpdate()
                    } catch (h) {
                        console.log(h)
                    }
                },
                FarmAllWell: function() {
                    try {
                        if (Ka = 320 == ClientLib.Data.MainData.GetInstance().get_Server().get_WorldId() ? 7 : 3,
                        c = [],
                        null === this.timeID) {
                            var q = Date.now();
                            this.timeID = setInterval(function() {
                                console.log("Here, state=" + E + ", targcnt=" + d + "/" + c.length);
                                var h = Date.now();
                                320 !== ClientLib.Data.MainData.GetInstance().get_Server().get_WorldId() && 18E6 < h - q && (q = h,
                                p = 1,
                                d = E = B = k = 0);
                                if (0 === E) {
                                    var b = ta = 0
                                      , f = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity();
                                    !1 === f.get_HasOutgoingAttack() && 100 > f.GetOffenseConditionInPercent() && (320 == ClientLib.Data.MainData.GetInstance().get_Server().get_WorldId() ? sa() : (f = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                    f.get_CityRepairData().RepairAll(ClientLib.Vis.Mode.ArmySetup)));
                                    f = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity();
                                    var x = f.get_PosX()
                                      , F = f.get_PosY()
                                      , O = ClientLib.Data.MainData.GetInstance().get_Server().get_MaxAttackDistance();
                                    h = ClientLib.Data.MainData.GetInstance().get_World();
                                    for (var a = F - 11; a <= F + 11; a++)
                                        for (var r = x - 11; r <= x + 11; r++) {
                                            var J = Math.abs(x - r)
                                              , u = Math.abs(F - a);
                                            u = Math.sqrt(J * J + u * u);
                                            J = f.CalculateAttackCommandPointCostToCoord(r, a);
                                            var w = 320 == ClientLib.Data.MainData.GetInstance().get_Server().get_WorldId() ? 41 : 21;
                                            if (!(J > w || u > O || (w = ClientLib.Base.MathUtil.EncodeCoordId(r, a),
                                            Xb[w] || (u = h.GetObjectFromPosition(r, a),
                                            null == u || void 0 === u[ca[2]] || 1 > u[ca[2]] || 3 < u[ca[2]] || 0 > u[ca[1]] - ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity().get_LvlOffense() + 3)))) {
                                                J = {
                                                    x: r,
                                                    y: a,
                                                    id: u[ca[4]],
                                                    tp: u[ca[2]],
                                                    rpcp: 0,
                                                    cp: J,
                                                    cord: w,
                                                    scnd: 0,
                                                    city: f.get_Id()
                                                };
                                                for (w = u = 0; u < c.length; )
                                                    c[u].id === J.id && w++,
                                                    u++;
                                                0 == w && c.push(J);
                                                b++
                                            }
                                        }
                                    d = 0;
                                    E = 1;
                                    console.log("toScanMap=");
                                    console.log(c);
                                    for (console.log("targcnt=" + d); d < c.length && 1 == c[d].scnd; )
                                        d++;
                                    console.log("targcnt=" + d);
                                    d < c.length && (r = c[d].x,
                                    a = c[d].y,
                                    h = ClientLib.Data.MainData.GetInstance().get_World(),
                                    u = h.GetObjectFromPosition(r, a),
                                    ClientLib.Data.MainData.GetInstance().get_Cities().set_CurrentCityId(c[d].id),
                                    f = qx.core.Init.getApplication(),
                                    b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                    null != b && b.get_CityArmyFormationsManager().set_CurrentTargetBaseId(c[d].id),
                                    f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSimulation, c[d].id, 0, 0),
                                    f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, c[d].id, 0, 0))
                                } else if (1 === E && d < c.length) {
                                    h = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity();
                                    if (null !== h) {
                                        r = c[d].x;
                                        a = c[d].y;
                                        h = ClientLib.Data.MainData.GetInstance().get_World();
                                        u = h.GetObjectFromPosition(r, a);
                                        h = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity();
                                        b = ClientLib.Data.MainData.GetInstance().get_Cities().GetCity(ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().get_Id());
                                        if (null === b || null === h || void 0 === b || void 0 === h)
                                            return;
                                        a = ma();
                                        if (null === a)
                                            return;
                                        b = Pa(a[0], a[1], a[2], a[3], 3, .33, a[4]);
                                        console.log("can kill: " + b[0] + " " + b[1] + "  " + b[2]);
                                        2 >= c[d].tp && 1 === ClientLib.Data.MainData.GetInstance().get_Player().get_Faction() ? f = b[2] - ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity().get_LvlOffense() + 1.999 : 2 >= c[d].tp && 2 === ClientLib.Data.MainData.GetInstance().get_Player().get_Faction() ? f = b[2] - ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity().get_LvlOffense() + 1.999 : 3 === c[d].tp && (f = b[2] - ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity().get_LvlOffense() + 1);
                                        h = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity();
                                        respcp = b[1] / c[d].cp;
                                        0 > Math.floor(f) ? c[d].rpcp = 0 : !0 === h.get_IsDamaged() && 320 !== ClientLib.Data.MainData.GetInstance().get_Server().get_WorldId() ? c[d].rpcp = 0 : h.get_HasIncommingAttack() ? c[d].rpcp = 0 : 100 === b[0] && 320 == ClientLib.Data.MainData.GetInstance().get_Server().get_WorldId() ? c[d].rpcp = respcp / 5 : c[d].rpcp = 100 === b[0] ? 0 * respcp / 5 : respcp;
                                        c[d].scnd = 1;
                                        console.log(c[d].rpcp);
                                        for (d++; d < c.length && 1 == c[d].scnd; )
                                            d++
                                    } else if (3 > ta)
                                        ta++;
                                    else
                                        for (ta = 0,
                                        c[d].scnd = 1,
                                        d++; d < c.length && 1 == c[d].scnd; )
                                            d++;
                                    d < c.length && (r = c[d].x,
                                    a = c[d].y,
                                    h = ClientLib.Data.MainData.GetInstance().get_World(),
                                    u = h.GetObjectFromPosition(r, a),
                                    ClientLib.Data.MainData.GetInstance().get_Cities().set_CurrentCityId(c[d].id),
                                    f = qx.core.Init.getApplication(),
                                    b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                    null != b && b.get_CityArmyFormationsManager().set_CurrentTargetBaseId(c[d].id),
                                    f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSimulation, c[d].id, 0, 0),
                                    f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, c[d].id, 0, 0))
                                } else if (1 === E && d === c.length)
                                    0 < c.length ? (c.sort(function(a, b) {
                                        return parseFloat(b.rpcp) - parseFloat(a.rpcp)
                                    }),
                                    E = 2,
                                    d = 0,
                                    d < c.length && (r = c[d].x,
                                    a = c[d].y,
                                    h = ClientLib.Data.MainData.GetInstance().get_World(),
                                    u = h.GetObjectFromPosition(r, a),
                                    ClientLib.Data.MainData.GetInstance().get_Cities().set_CurrentCityId(c[d].id),
                                    f = qx.core.Init.getApplication(),
                                    b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                    null != b && b.get_CityArmyFormationsManager().set_CurrentTargetBaseId(c[d].id),
                                    f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSimulation, c[d].id, 0, 0),
                                    f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, c[d].id, 0, 0))) : (d = E = 0,
                                    qx.core.Init.getApplication().getPlayArea().setView(9, 0, 0, 0),
                                    ClientLib.Vis.VisMain.GetInstance().Update(),
                                    ClientLib.Vis.VisMain.GetInstance().ViewUpdate());
                                else if (2 === E && d < c.length && 0 < c[d].rpcp)
                                    if (a = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity(),
                                    b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                    h = ClientLib.Data.MainData.GetInstance().get_World(),
                                    null !== a && null !== b)
                                        if (void 0 === h.GetObjectFromPosition(a.get_PosX(), a.get_PosY()))
                                            p = 1,
                                            B = k = 0,
                                            console.log("Object dead or new"),
                                            na++,
                                            c[d].rpcp = 0,
                                            c.sort(function(a, b) {
                                                return parseFloat(b.rpcp) - parseFloat(a.rpcp)
                                            }),
                                            0 === c[d].rpcp || 2 < na ? (d = E = na = 0,
                                            qx.core.Init.getApplication().getPlayArea().setView(9, 0, 0, 0),
                                            ClientLib.Vis.VisMain.GetInstance().Update(),
                                            ClientLib.Vis.VisMain.GetInstance().ViewUpdate()) : (r = c[d].x,
                                            a = c[d].y,
                                            h = ClientLib.Data.MainData.GetInstance().get_World(),
                                            u = h.GetObjectFromPosition(r, a),
                                            ClientLib.Data.MainData.GetInstance().get_Cities().set_CurrentCityId(c[d].id),
                                            f = qx.core.Init.getApplication(),
                                            b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                            null != b && b.get_CityArmyFormationsManager().set_CurrentTargetBaseId(c[d].id),
                                            f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSimulation, c[d].id, 0, 0),
                                            f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, c[d].id, 0, 0));
                                        else if (!0 === b.get_HasOutgoingAttack() && !0 === a.get_HasIncommingAttack() && (B = k = 0),
                                        !1 === b.get_HasOutgoingAttack() && 100 > b.GetOffenseConditionInPercent() && (320 == ClientLib.Data.MainData.GetInstance().get_Server().get_WorldId() ? sa() : (f = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                        f.get_CityRepairData().RepairAll(ClientLib.Vis.Mode.ArmySetup)),
                                        k = 0),
                                        !1 === a.get_HasIncommingAttack() && 1 === p) {
                                            h = 0;
                                            100 == ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().GetDefenseConditionInPercent() ? (N = 110,
                                            h = 0) : (N = 35,
                                            h = 1);
                                            f = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity();
                                            r = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().get_Id();
                                            f = ClientLib.Data.MainData.GetInstance().get_Cities().GetCity(r);
                                            qx.core.Init.getApplication().getPlayArea().setView(3, 0, 0, 0);
                                            ClientLib.Vis.VisMain.GetInstance().Update();
                                            ClientLib.Vis.VisMain.GetInstance().ViewUpdate();
                                            qx.core.Init.getApplication().getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, r, 0, 0);
                                            console.log("Object underattack=" + a.get_HasIncommingAttack());
                                            if (0 === k && 100 === b.GetOffenseConditionInPercent() && 0 === B) {
                                                console.log("optimization under way: gg=" + p + " optzd=" + k);
                                                a = ma();
                                                if (null === a)
                                                    return;
                                                k = 1;
                                                p = 0;
                                                za = y = 101;
                                                f = fa(a[0], a[1], a[2], a[3], 3, .33, a[4], h);
                                                4 < Math.min(f[1]) && (f = fa(a[0], a[1], a[2], a[3], 3, .1, a[4], h),
                                                4 < Math.min(f[1]) && (f = fa(a[0], a[1], a[2], a[3], 3, .03, a[4], h)));
                                                Xa(f[0], f[1]);
                                                window.setTimeout(function() {
                                                    ClientLib.API.Battleground.GetInstance().SimulateBattle();
                                                    p = 1;
                                                    B++
                                                }, 1E3)
                                            } else if (100 === b.GetOffenseConditionInPercent() && 1 === p && 1 === k)
                                                if (320 == ClientLib.Data.MainData.GetInstance().get_Server().get_WorldId())
                                                    qx.core.Init.getApplication().getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().get_Id(), 0, 0),
                                                    Math.floor(ClientLib.Data.MainData.GetInstance().get_Player().GetCommandPointCount()) >= c[d].cp ? (a = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity(),
                                                    b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                                    a.InvokeBattle(b, phe.cnc.Util.createEventDelegate(ClientLib.Net.CommandResult, null, function(a, b) {
                                                        console.log("Can do optimization again" + k)
                                                    }), a.get_Id())) : console.log("Wait until enough cp");
                                                else {
                                                    if (101 !== y)
                                                        if (0 === y)
                                                            console.log("One-shot!!!"),
                                                            console.log("attack under way: gg=" + p + " optzd=" + k),
                                                            qx.core.Init.getApplication().getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().get_Id(), 0, 0),
                                                            Math.floor(ClientLib.Data.MainData.GetInstance().get_Player().GetCommandPointCount()) >= c[d].cp ? (a = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity(),
                                                            b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                                            a.InvokeBattle(b, phe.cnc.Util.createEventDelegate(ClientLib.Net.CommandResult, null, function(a, b) {
                                                                console.log("Can do optimization again" + k)
                                                            }), a.get_Id())) : console.log("Wait until enough cp");
                                                        else if (1 === ClientLib.Data.MainData.GetInstance().get_Player().get_Faction() && 2 >= c[d].tp && 50 > y && 16 > c[d].cp)
                                                            console.log("Cheap two-shot!!!"),
                                                            console.log("attack under way: gg=" + p + " optzd=" + k),
                                                            qx.core.Init.getApplication().getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().get_Id(), 0, 0),
                                                            Math.floor(ClientLib.Data.MainData.GetInstance().get_Player().GetCommandPointCount()) >= 2 * c[d].cp ? (a = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity(),
                                                            b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                                            a.InvokeBattle(b, phe.cnc.Util.createEventDelegate(ClientLib.Net.CommandResult, null, function(a, b) {
                                                                console.log("Can do optimization again" + k)
                                                            }), a.get_Id())) : console.log("Wait until enough cp");
                                                        else if (3 === c[d].tp && 50 > y && 16 > c[d].cp)
                                                            console.log("structure cy: " + y),
                                                            console.log("Two-shot!!! Lets go!"),
                                                            console.log("attack under way: gg=" + p + " optzd=" + k),
                                                            qx.core.Init.getApplication().getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity().get_Id(), 0, 0),
                                                            Math.floor(ClientLib.Data.MainData.GetInstance().get_Player().GetCommandPointCount()) >= 2 * c[d].cp ? (a = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentCity(),
                                                            b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                                            a.InvokeBattle(b, phe.cnc.Util.createEventDelegate(ClientLib.Net.CommandResult, null, function(a, b) {
                                                                console.log("Can do optimization again" + k)
                                                            }), a.get_Id())) : console.log("Wait until enough cp");
                                                        else {
                                                            console.log("structure cy: " + y);
                                                            p = 1;
                                                            B = k = 0;
                                                            console.log("Object cannot be one-shot or two-shot");
                                                            na++;
                                                            w = ClientLib.Base.MathUtil.EncodeCoordId(c[d].x, c[d].y);
                                                            Xb[w] = 1;
                                                            c[d].rpcp = 0;
                                                            c.sort(function(a, b) {
                                                                return parseFloat(b.rpcp) - parseFloat(a.rpcp)
                                                            });
                                                            if (0 === c[d].rpcp || 2 < na) {
                                                                d = E = na = 0;
                                                                qx.core.Init.getApplication().getPlayArea().setView(9, 0, 0, 0);
                                                                ClientLib.Vis.VisMain.GetInstance().Update();
                                                                ClientLib.Vis.VisMain.GetInstance().ViewUpdate();
                                                                return
                                                            }
                                                            r = c[d].x;
                                                            a = c[d].y;
                                                            h = ClientLib.Data.MainData.GetInstance().get_World();
                                                            u = h.GetObjectFromPosition(r, a);
                                                            ClientLib.Data.MainData.GetInstance().get_Cities().set_CurrentCityId(c[d].id);
                                                            f = qx.core.Init.getApplication();
                                                            b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity();
                                                            null != b && b.get_CityArmyFormationsManager().set_CurrentTargetBaseId(c[d].id);
                                                            f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSimulation, c[d].id, 0, 0);
                                                            f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, c[d].id, 0, 0);
                                                            return
                                                        }
                                                }
                                            else
                                                console.log("Hold:  gg=" + p + " optzd=" + k);
                                            !1 === b.get_HasOutgoingAttack() && 100 > b.GetOffenseConditionInPercent() && (320 == ClientLib.Data.MainData.GetInstance().get_Server().get_WorldId() ? sa() : (f = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                            f.get_CityRepairData().RepairAll(ClientLib.Vis.Mode.ArmySetup)))
                                        } else
                                            console.log("Object underattack=" + a.get_HasIncommingAttack() + " gg=" + p + " optzd=" + k);
                                    else
                                        p = 1,
                                        B = k = 0,
                                        console.log("Object dead or new"),
                                        na++,
                                        c[d].rpcp = 0,
                                        c.sort(function(a, b) {
                                            return parseFloat(b.rpcp) - parseFloat(a.rpcp)
                                        }),
                                        0 === c[d].rpcp || 2 < na ? (d = E = na = 0,
                                        qx.core.Init.getApplication().getPlayArea().setView(9, 0, 0, 0),
                                        ClientLib.Vis.VisMain.GetInstance().Update(),
                                        ClientLib.Vis.VisMain.GetInstance().ViewUpdate()) : (r = c[d].x,
                                        a = c[d].y,
                                        h = ClientLib.Data.MainData.GetInstance().get_World(),
                                        u = h.GetObjectFromPosition(r, a),
                                        ClientLib.Data.MainData.GetInstance().get_Cities().set_CurrentCityId(c[d].id),
                                        f = qx.core.Init.getApplication(),
                                        b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                        null != b && b.get_CityArmyFormationsManager().set_CurrentTargetBaseId(c[d].id),
                                        f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSimulation, c[d].id, 0, 0),
                                        f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, c[d].id, 0, 0));
                                else
                                    p = 1,
                                    B = k = 0,
                                    console.log("Object dead or new"),
                                    na++,
                                    w = ClientLib.Base.MathUtil.EncodeCoordId(c[d].x, c[d].y),
                                    Xb[w] = 1,
                                    c[d].rpcp = 0,
                                    c.sort(function(a, b) {
                                        return parseFloat(b.rpcp) - parseFloat(a.rpcp)
                                    }),
                                    0 === c[d].rpcp || 2 < na ? (d = E = na = 0,
                                    qx.core.Init.getApplication().getPlayArea().setView(9, 0, 0, 0),
                                    ClientLib.Vis.VisMain.GetInstance().Update(),
                                    ClientLib.Vis.VisMain.GetInstance().ViewUpdate()) : (r = c[d].x,
                                    a = c[d].y,
                                    h = ClientLib.Data.MainData.GetInstance().get_World(),
                                    u = h.GetObjectFromPosition(r, a),
                                    ClientLib.Data.MainData.GetInstance().get_Cities().set_CurrentCityId(c[d].id),
                                    f = qx.core.Init.getApplication(),
                                    b = ClientLib.Data.MainData.GetInstance().get_Cities().get_CurrentOwnCity(),
                                    null != b && b.get_CityArmyFormationsManager().set_CurrentTargetBaseId(c[d].id),
                                    f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSimulation, c[d].id, 0, 0),
                                    f.getPlayArea().setView(ClientLib.Data.PlayerAreaViewMode.pavmCombatSetupDefense, c[d].id, 0, 0))
                            }, 1E3 * Ka);
                            this.buttons.btnFarmWell.setLabel("STOP");
                            this.buttons.btnFarmWell.setToolTipText("Stop Farming")
                        } else
                            clearInterval(this.timeID),
                            this.timeID = null,
                            this.buttons.btnFarmWell.setLabel("FarmWell"),
                            this.buttons.btnFarmWell.setToolTipText("Start Farming"),
                            p = 1,
                            B = d = E = k = 0,
                            qx.core.Init.getApplication().getPlayArea().setView(9, 0, 0, 0),
                            ClientLib.Vis.VisMain.GetInstance().Update(),
                            ClientLib.Vis.VisMain.GetInstance().ViewUpdate()
                    } catch (h) {
                        console.log(h)
                    }
                },
                getTimestamp: function() {
                    return Math.round((new Date).getTime() / 1E3)
                },
                onSimulateBattleFinishedEvent: function(c) {
                    console.log(c);
                    try {
                        for (var d = 0; d < c.length; d++) {
                            var b = c[d].Value
                              , f = b.t
                              , k = ClientLib.Res.ResMain.GetInstance().GetUnit_Obj(f)
                              , p = b.sh
                              , q = b.h
                              , a = ClientLib.API.Util.GetUnitMaxHealthByLevel(b.l, k, !1);
                            switch (f) {
                            case 131:
                            case 158:
                            case 195:
                                za = 0 < p ? q / 16 / a * 100 : 0;
                                break;
                            case 112:
                            case 151:
                            case 177:
                                y = q / 16 / a * 100;
                            case 251:
                                y = q / 16 / a * 100
                            }
                        }
                        console.log("structuresconstruction = " + y);
                        console.log("structuresdefense = " + za)
                    } catch (r) {
                        console.log("onSimulateBattleFinishedEvent()\n check getRepairCost()", r)
                    }
                }
            }
        })
    }
    function jb() {
        try {
            if ("undefined" !== typeof qx) {
                var c = qx.core.Init.getApplication()
                  , d = qx.core.Init.getApplication().getMenuBar();
                c && d && "undefined" !== typeof PerforceChangelist ? 10 < qc || "undefined" !== typeof CCTAWrapper_IsInstalled ? (Ac(),
                window.CCTAbot.main.getInstance().initialize()) : (qc++,
                window.setTimeout(jb, 1E4)) : window.setTimeout(jb, 1E4)
            } else
                window.setTimeout(jb, 1E4)
        } catch (b) {
            "undefined" !== typeof console ? console.log(b) : window.opera ? opera.postError(b) : GM_log(b)
        }
    }
    function Wb(c, d, b, f) {
        c = c.toString().replace(/\s/gim, "");
        d = c.match(d);
        var h;
        for (h = 1; h < f + 1; h++)
            null != d && 6 == d[h].length ? console.debug(b, h, d[h]) : null != d && 0 < d[h].length ? console.warn(b, h, d[h]) : (console.error("Error - ", b, h, "not found"),
            console.warn(b, c));
        return d
    }
    console.log("CCTAbot loaded");
    var p = 1
      , k = 0
      , B = 0
      , za = 101
      , y = 101
      , ta = 0
      , na = 0
      , Ka = 3
      , Wa = []
      , ya = []
      , N = 35
      , hb = 0
      , ka = {
        GDI_Accumulator: 126,
        GDI_Refinery: 123,
        "GDI_Trade Center": 128,
        GDI_Silo: 124,
        "GDI_Power Plant": 125,
        "GDI_Construction Yard": 121,
        GDI_Airport: 131,
        GDI_Barracks: 129,
        GDI_Factory: 130,
        "GDI_Defense HQ": 132,
        "GDI_Defense Facility": 122,
        "GDI_Command Center": 127,
        GDI_Support_Art: 135,
        GDI_Support_Air: 133,
        GDI_Support_Ion: 134,
        GDI_Harvester: 128,
        GDI_Harvester_Crystal: 128,
        FOR_Silo: 104,
        FOR_Refinery: 103,
        "FOR_Tiberium Booster": 109,
        "FOR_Crystal Booster": 110,
        "FOR_Trade Center": 106,
        "FOR_Defense Facility": 102,
        "FOR_Construction Yard": 101,
        FOR_Harvester_Tiberium: 107,
        "FOR_Defense HQ": 105,
        FOR_Harvester_Crystal: 108,
        NOD_Refinery: 143,
        "NOD_Power Plant": 145,
        NOD_Harvester: 148,
        "NOD_Construction Yard": 141,
        NOD_Airport: 151,
        "NOD_Trade Center": 148,
        "NOD_Defense HQ": 152,
        NOD_Barracks: 149,
        NOD_Silo: 144,
        NOD_Factory: 150,
        NOD_Harvester_Crystal: 148,
        "NOD_Command Post": 147,
        NOD_Support_Art: 153,
        NOD_Support_Ion: 155,
        NOD_Accumulator: 146,
        NOD_Support_Air: 154,
        "NOD_Defense Facility": 142,
        GDI_Wall: 221,
        GDI_Cannon: 224,
        "GDI_Antitank Barrier": 222,
        GDI_Barbwire: 223,
        GDI_Turret: 321,
        GDI_Flak: 225,
        "GDI_Art Inf": 422,
        "GDI_Art Air": 423,
        "GDI_Art Tank": 421,
        "GDI_Def_APC Guardian": 425,
        "GDI_Def_Missile Squad": 323,
        GDI_Def_Pitbull: 426,
        GDI_Def_Predator: 424,
        GDI_Def_Sniper: 324,
        "GDI_Def_Zone Trooper": 322,
        "NOD_Def_Antitank Barrier": 242,
        "NOD_Def_Art Air": 443,
        "NOD_Def_Art Inf": 442,
        "NOD_Def_Art Tank": 441,
        "NOD_Def_Attack Bike": 446,
        NOD_Def_Barbwire: 243,
        "NOD_Def_Black Hand": 342,
        NOD_Def_Cannon: 244,
        NOD_Def_Confessor: 344,
        NOD_Def_Flak: 245,
        "NOD_Def_MG Nest": 341,
        "NOD_Def_Militant Rocket Soldiers": 343,
        NOD_Def_Reckoner: 445,
        "NOD_Def_Scorpion Tank": 444,
        NOD_Def_Wall: 241,
        FOR_Wall: 201,
        FOR_Barbwire_VS_Inf: 203,
        FOR_Barrier_VS_Veh: 202,
        FOR_Inf_VS_Inf: 303,
        FOR_Inf_VS_Veh: 302,
        FOR_Inf_VS_Air: 304,
        FOR_Sniper: 305,
        FOR_Mammoth: 407,
        FOR_Veh_VS_Inf: 405,
        FOR_Veh_VS_Veh: 404,
        FOR_Veh_VS_Air: 406,
        FOR_Turret_VS_Inf: 301,
        FOR_Turret_VS_Inf_ranged: 402,
        FOR_Turret_VS_Veh: 204,
        FOR_Turret_VS_Veh_ranged: 401,
        FOR_Turret_VS_Air: 205,
        FOR_Turret_VS_Air_ranged: 403,
        "GDI_APC Guardian": 623,
        GDI_Commando: 525,
        GDI_Firehawk: 724,
        GDI_Juggernaut: 625,
        GDI_Kodiak: 723,
        GDI_Mammoth: 624,
        "GDI_Missile Squad": 522,
        GDI_Orca: 721,
        GDI_Paladin: 722,
        GDI_Pitbull: 621,
        GDI_Predator: 622,
        GDI_Riflemen: 521,
        "GDI_Sniper Team": 523,
        "GDI_Zone Trooper": 524,
        "NOD_Attack Bike": 641,
        NOD_Avatar: 644,
        "NOD_Black Hand": 544,
        NOD_Cobra: 742,
        NOD_Commando: 545,
        NOD_Confessor: 543,
        "NOD_Militant Rocket Soldiers": 542,
        NOD_Militants: 541,
        NOD_Reckoner: 643,
        NOD_Salamander: 743,
        "NOD_Scorpion Tank": 642,
        "NOD_Specter Artilery": 645,
        NOD_Venom: 741,
        NOD_Vertigo: 744,
        FOR_Fortress_DEF_Turret_VS_Air: 215,
        FOR_Fortress_DEF_Turret_VS_Inf: 311,
        FOR_Fortress_DEF_Turret_VS_Veh: 204,
        FOR_Fortress_DEF_Turret_VS_Air_ranged: 413,
        FOR_Fortress_DEF_Turret_VS_Inf_ranged: 412,
        FOR_Fortress_DEF_Turret_VS_Veh_ranged: 411,
        FOR_Fortress_DEF_Tower: 206,
        FOR_Fortress_DEF_Unit: 408,
        FOR_Fortress_DEF_Unit_ranged: 409,
        FOR_Fortress_DEF_Inf_VS_Inf: 313,
        FOR_Fortress_DEF_Sniper: 315,
        FOR_Fortress_DEF_Veh_VS_Air: 406,
        FOR_Fortress_DEF_Mammoth: 407,
        FOR_Fortress_BASE_Turret_VS_Air: 215,
        FOR_Fortress_BASE_Turret_VS_Inf: 311,
        FOR_Fortress_BASE_Turret_VS_Veh: 204,
        FOR_Fortress_BASE_Turret_VS_Air_ranged: 403,
        FOR_Fortress_BASE_Turret_VS_Inf_ranged: 402,
        FOR_Fortress_BASE_Turret_VS_Veh_ranged: 401,
        FOR_Fortress_BASE_Tower: 206,
        FOR_Fortress_BASE_Wall: 201,
        FOR_Fortress_BASE_Barbwire_VS_Inf: 203,
        FOR_Fortress_BASE_Barrier_VS_Veh: 202,
        "FOR_Fortress_BASE_Construction Yard": 101,
        FOR_Fortress_BASE_MgNestHeavy: 306,
        "FOR_GDI_Antitank Barrier": 222,
        FOR_GDI_Barbwire: 223,
        FOR_GDI_Cannon: 224,
        FOR_GDI_Flak: 225,
        FOR_GDI_Turret: 321,
        FOR_GDI_Wall: 221,
        "FOR_NOD_Def_Antitank Barrier": 242,
        FOR_NOD_Def_Barbwire: 243,
        FOR_NOD_Def_Cannon: 244,
        FOR_NOD_Def_Flak: 245,
        "FOR_NOD_Def_MG Nest": 341,
        FOR_NOD_Def_Wall: 241,
        "FOR_GDI_Art Inf": 422,
        "FOR_GDI_Art Tank": 421,
        "FOR_GDI_Art Air": 423,
        "FOR_NOD_Def_Art Inf": 443,
        "FOR_NOD_Def_Art Tank": 441,
        "FOR_NOD_Def_Art Air": 443,
        FOR_NOD_Airport: 151,
        FOR_NOD_Factory: 150,
        FOR_NOD_Barracks: 149,
        "FOR_NOD_Command Center": 147,
        FOR_GDI_Airport: 131,
        FOR_GDI_Factory: 130,
        FOR_GDI_Barracks: 129,
        "FOR_GDI_Command Center": 127,
        FOR_EVENT_Construction_Yard: 101,
        "<last>": "."
    }
      , yc = {
        GDI_Wall: 221,
        GDI_Cannon: 224,
        "GDI_Antitank Barrier": 222,
        GDI_Barbwire: 223,
        GDI_Turret: 321,
        GDI_Flak: 225,
        "GDI_Art Inf": 422,
        "GDI_Art Air": 423,
        "GDI_Art Tank": 421,
        "GDI_Def_APC Guardian": 425,
        "GDI_Def_Missile Squad": 323,
        GDI_Def_Pitbull: 426,
        GDI_Def_Predator: 424,
        GDI_Def_Sniper: 324,
        "GDI_Def_Zone Trooper": 322,
        "NOD_Def_Antitank Barrier": 242,
        "NOD_Def_Art Air": 443,
        "NOD_Def_Art Inf": 442,
        "NOD_Def_Art Tank": 441,
        "NOD_Def_Attack Bike": 446,
        NOD_Def_Barbwire: 243,
        "NOD_Def_Black Hand": 342,
        NOD_Def_Cannon: 244,
        NOD_Def_Confessor: 344,
        NOD_Def_Flak: 245,
        "NOD_Def_MG Nest": 341,
        "NOD_Def_Militant Rocket Soldiers": 343,
        NOD_Def_Reckoner: 445,
        "NOD_Def_Scorpion Tank": 444,
        NOD_Def_Wall: 241,
        FOR_Wall: 201,
        FOR_Barbwire_VS_Inf: 203,
        FOR_Barrier_VS_Veh: 202,
        FOR_Inf_VS_Inf: 303,
        FOR_Inf_VS_Veh: 302,
        FOR_Inf_VS_Air: 304,
        FOR_Sniper: 305,
        FOR_Mammoth: 407,
        FOR_Veh_VS_Inf: 405,
        FOR_Veh_VS_Veh: 404,
        FOR_Veh_VS_Air: 406,
        FOR_Turret_VS_Inf: 301,
        FOR_Turret_VS_Inf_ranged: 402,
        FOR_Turret_VS_Veh: 204,
        FOR_Turret_VS_Veh_ranged: 401,
        FOR_Turret_VS_Air: 205,
        FOR_Turret_VS_Air_ranged: 403,
        FOR_Fortress_DEF_Turret_VS_Air: 215,
        FOR_Fortress_DEF_Turret_VS_Inf: 311,
        FOR_Fortress_DEF_Turret_VS_Veh: 204,
        FOR_Fortress_DEF_Turret_VS_Air_ranged: 413,
        FOR_Fortress_DEF_Turret_VS_Inf_ranged: 412,
        FOR_Fortress_DEF_Turret_VS_Veh_ranged: 411,
        FOR_Fortress_DEF_Tower: 206,
        FOR_Fortress_DEF_Unit: 408,
        FOR_Fortress_DEF_Unit_ranged: 409,
        FOR_Fortress_DEF_Inf_VS_Inf: 313,
        FOR_Fortress_DEF_Sniper: 315,
        FOR_Fortress_DEF_Veh_VS_Air: 406,
        FOR_Fortress_DEF_Mammoth: 407,
        "": ""
    }
      , wc = {
        "GDI_APC Guardian": 623,
        GDI_Commando: 525,
        GDI_Firehawk: 724,
        GDI_Juggernaut: 625,
        GDI_Kodiak: 723,
        GDI_Mammoth: 624,
        "GDI_Missile Squad": 522,
        GDI_Orca: 721,
        GDI_Paladin: 722,
        GDI_Pitbull: 621,
        GDI_Predator: 622,
        GDI_Riflemen: 521,
        "GDI_Sniper Team": 523,
        "GDI_Zone Trooper": 524,
        "NOD_Attack Bike": 641,
        NOD_Avatar: 644,
        "NOD_Black Hand": 544,
        NOD_Cobra: 742,
        NOD_Commando: 545,
        NOD_Confessor: 543,
        "NOD_Militant Rocket Soldiers": 542,
        NOD_Militants: 541,
        NOD_Reckoner: 643,
        NOD_Salamander: 743,
        "NOD_Scorpion Tank": 642,
        "NOD_Specter Artilery": 645,
        NOD_Venom: 741,
        NOD_Vertigo: 744,
        "": ""
    };
    setTimeout(Vb, 6500);
    var E = 0
      , c = []
      , ib = []
      , Xb = []
      , d = 0
      , ca = ["WWSRPJ"]
      , $a = ["DMMYXE"]
      , Cb = 1
      , qc = 0;
    /commandandconquer\.com/i.test(document.domain) && window.setTimeout(jb, 1E4)
}
)();
